// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: parca/debuginfo/v1alpha1/debuginfo.proto

package debuginfov1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/parca-dev/parca/gen/proto/go/parca/debuginfo/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// DebuginfoServiceName is the fully-qualified name of the DebuginfoService service.
	DebuginfoServiceName = "parca.debuginfo.v1alpha1.DebuginfoService"
)

// DebuginfoServiceClient is a client for the parca.debuginfo.v1alpha1.DebuginfoService service.
type DebuginfoServiceClient interface {
	// Upload ingests debug info for a given build_id
	Upload(context.Context) *connect_go.ClientStreamForClient[v1alpha1.UploadRequest, v1alpha1.UploadResponse]
	// ShouldInitiateUpload returns whether an upload for a given build_id should be initiated or not.
	ShouldInitiateUpload(context.Context, *connect_go.Request[v1alpha1.ShouldInitiateUploadRequest]) (*connect_go.Response[v1alpha1.ShouldInitiateUploadResponse], error)
	// InitiateUpload returns a strategy and information to upload debug info for a given build_id.
	InitiateUpload(context.Context, *connect_go.Request[v1alpha1.InitiateUploadRequest]) (*connect_go.Response[v1alpha1.InitiateUploadResponse], error)
	// MarkUploadFinished marks the upload as finished for a given build_id.
	MarkUploadFinished(context.Context, *connect_go.Request[v1alpha1.MarkUploadFinishedRequest]) (*connect_go.Response[v1alpha1.MarkUploadFinishedResponse], error)
}

// NewDebuginfoServiceClient constructs a client for the parca.debuginfo.v1alpha1.DebuginfoService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDebuginfoServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) DebuginfoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &debuginfoServiceClient{
		upload: connect_go.NewClient[v1alpha1.UploadRequest, v1alpha1.UploadResponse](
			httpClient,
			baseURL+"/parca.debuginfo.v1alpha1.DebuginfoService/Upload",
			opts...,
		),
		shouldInitiateUpload: connect_go.NewClient[v1alpha1.ShouldInitiateUploadRequest, v1alpha1.ShouldInitiateUploadResponse](
			httpClient,
			baseURL+"/parca.debuginfo.v1alpha1.DebuginfoService/ShouldInitiateUpload",
			opts...,
		),
		initiateUpload: connect_go.NewClient[v1alpha1.InitiateUploadRequest, v1alpha1.InitiateUploadResponse](
			httpClient,
			baseURL+"/parca.debuginfo.v1alpha1.DebuginfoService/InitiateUpload",
			opts...,
		),
		markUploadFinished: connect_go.NewClient[v1alpha1.MarkUploadFinishedRequest, v1alpha1.MarkUploadFinishedResponse](
			httpClient,
			baseURL+"/parca.debuginfo.v1alpha1.DebuginfoService/MarkUploadFinished",
			opts...,
		),
	}
}

// debuginfoServiceClient implements DebuginfoServiceClient.
type debuginfoServiceClient struct {
	upload               *connect_go.Client[v1alpha1.UploadRequest, v1alpha1.UploadResponse]
	shouldInitiateUpload *connect_go.Client[v1alpha1.ShouldInitiateUploadRequest, v1alpha1.ShouldInitiateUploadResponse]
	initiateUpload       *connect_go.Client[v1alpha1.InitiateUploadRequest, v1alpha1.InitiateUploadResponse]
	markUploadFinished   *connect_go.Client[v1alpha1.MarkUploadFinishedRequest, v1alpha1.MarkUploadFinishedResponse]
}

// Upload calls parca.debuginfo.v1alpha1.DebuginfoService.Upload.
func (c *debuginfoServiceClient) Upload(ctx context.Context) *connect_go.ClientStreamForClient[v1alpha1.UploadRequest, v1alpha1.UploadResponse] {
	return c.upload.CallClientStream(ctx)
}

// ShouldInitiateUpload calls parca.debuginfo.v1alpha1.DebuginfoService.ShouldInitiateUpload.
func (c *debuginfoServiceClient) ShouldInitiateUpload(ctx context.Context, req *connect_go.Request[v1alpha1.ShouldInitiateUploadRequest]) (*connect_go.Response[v1alpha1.ShouldInitiateUploadResponse], error) {
	return c.shouldInitiateUpload.CallUnary(ctx, req)
}

// InitiateUpload calls parca.debuginfo.v1alpha1.DebuginfoService.InitiateUpload.
func (c *debuginfoServiceClient) InitiateUpload(ctx context.Context, req *connect_go.Request[v1alpha1.InitiateUploadRequest]) (*connect_go.Response[v1alpha1.InitiateUploadResponse], error) {
	return c.initiateUpload.CallUnary(ctx, req)
}

// MarkUploadFinished calls parca.debuginfo.v1alpha1.DebuginfoService.MarkUploadFinished.
func (c *debuginfoServiceClient) MarkUploadFinished(ctx context.Context, req *connect_go.Request[v1alpha1.MarkUploadFinishedRequest]) (*connect_go.Response[v1alpha1.MarkUploadFinishedResponse], error) {
	return c.markUploadFinished.CallUnary(ctx, req)
}

// DebuginfoServiceHandler is an implementation of the parca.debuginfo.v1alpha1.DebuginfoService
// service.
type DebuginfoServiceHandler interface {
	// Upload ingests debug info for a given build_id
	Upload(context.Context, *connect_go.ClientStream[v1alpha1.UploadRequest]) (*connect_go.Response[v1alpha1.UploadResponse], error)
	// ShouldInitiateUpload returns whether an upload for a given build_id should be initiated or not.
	ShouldInitiateUpload(context.Context, *connect_go.Request[v1alpha1.ShouldInitiateUploadRequest]) (*connect_go.Response[v1alpha1.ShouldInitiateUploadResponse], error)
	// InitiateUpload returns a strategy and information to upload debug info for a given build_id.
	InitiateUpload(context.Context, *connect_go.Request[v1alpha1.InitiateUploadRequest]) (*connect_go.Response[v1alpha1.InitiateUploadResponse], error)
	// MarkUploadFinished marks the upload as finished for a given build_id.
	MarkUploadFinished(context.Context, *connect_go.Request[v1alpha1.MarkUploadFinishedRequest]) (*connect_go.Response[v1alpha1.MarkUploadFinishedResponse], error)
}

// NewDebuginfoServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDebuginfoServiceHandler(svc DebuginfoServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/parca.debuginfo.v1alpha1.DebuginfoService/Upload", connect_go.NewClientStreamHandler(
		"/parca.debuginfo.v1alpha1.DebuginfoService/Upload",
		svc.Upload,
		opts...,
	))
	mux.Handle("/parca.debuginfo.v1alpha1.DebuginfoService/ShouldInitiateUpload", connect_go.NewUnaryHandler(
		"/parca.debuginfo.v1alpha1.DebuginfoService/ShouldInitiateUpload",
		svc.ShouldInitiateUpload,
		opts...,
	))
	mux.Handle("/parca.debuginfo.v1alpha1.DebuginfoService/InitiateUpload", connect_go.NewUnaryHandler(
		"/parca.debuginfo.v1alpha1.DebuginfoService/InitiateUpload",
		svc.InitiateUpload,
		opts...,
	))
	mux.Handle("/parca.debuginfo.v1alpha1.DebuginfoService/MarkUploadFinished", connect_go.NewUnaryHandler(
		"/parca.debuginfo.v1alpha1.DebuginfoService/MarkUploadFinished",
		svc.MarkUploadFinished,
		opts...,
	))
	return "/parca.debuginfo.v1alpha1.DebuginfoService/", mux
}

// UnimplementedDebuginfoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDebuginfoServiceHandler struct{}

func (UnimplementedDebuginfoServiceHandler) Upload(context.Context, *connect_go.ClientStream[v1alpha1.UploadRequest]) (*connect_go.Response[v1alpha1.UploadResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("parca.debuginfo.v1alpha1.DebuginfoService.Upload is not implemented"))
}

func (UnimplementedDebuginfoServiceHandler) ShouldInitiateUpload(context.Context, *connect_go.Request[v1alpha1.ShouldInitiateUploadRequest]) (*connect_go.Response[v1alpha1.ShouldInitiateUploadResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("parca.debuginfo.v1alpha1.DebuginfoService.ShouldInitiateUpload is not implemented"))
}

func (UnimplementedDebuginfoServiceHandler) InitiateUpload(context.Context, *connect_go.Request[v1alpha1.InitiateUploadRequest]) (*connect_go.Response[v1alpha1.InitiateUploadResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("parca.debuginfo.v1alpha1.DebuginfoService.InitiateUpload is not implemented"))
}

func (UnimplementedDebuginfoServiceHandler) MarkUploadFinished(context.Context, *connect_go.Request[v1alpha1.MarkUploadFinishedRequest]) (*connect_go.Response[v1alpha1.MarkUploadFinishedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("parca.debuginfo.v1alpha1.DebuginfoService.MarkUploadFinished is not implemented"))
}
