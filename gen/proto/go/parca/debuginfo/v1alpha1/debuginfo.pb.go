// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: parca/debuginfo/v1alpha1/debuginfo.proto

package debuginfov1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The strategy to use for uploading.
type UploadInstructions_UploadStrategy int32

const (
	// The upload is not allowed.
	UploadInstructions_UPLOAD_STRATEGY_UNSPECIFIED UploadInstructions_UploadStrategy = 0
	// The upload is allowed and should be done via the Upload RPC.
	UploadInstructions_UPLOAD_STRATEGY_GRPC UploadInstructions_UploadStrategy = 1
	// The upload is allowed and should be done via a returned signed URL.
	UploadInstructions_UPLOAD_STRATEGY_SIGNED_URL UploadInstructions_UploadStrategy = 2
)

// Enum value maps for UploadInstructions_UploadStrategy.
var (
	UploadInstructions_UploadStrategy_name = map[int32]string{
		0: "UPLOAD_STRATEGY_UNSPECIFIED",
		1: "UPLOAD_STRATEGY_GRPC",
		2: "UPLOAD_STRATEGY_SIGNED_URL",
	}
	UploadInstructions_UploadStrategy_value = map[string]int32{
		"UPLOAD_STRATEGY_UNSPECIFIED": 0,
		"UPLOAD_STRATEGY_GRPC":        1,
		"UPLOAD_STRATEGY_SIGNED_URL":  2,
	}
)

func (x UploadInstructions_UploadStrategy) Enum() *UploadInstructions_UploadStrategy {
	p := new(UploadInstructions_UploadStrategy)
	*p = x
	return p
}

func (x UploadInstructions_UploadStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UploadInstructions_UploadStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_parca_debuginfo_v1alpha1_debuginfo_proto_enumTypes[0].Descriptor()
}

func (UploadInstructions_UploadStrategy) Type() protoreflect.EnumType {
	return &file_parca_debuginfo_v1alpha1_debuginfo_proto_enumTypes[0]
}

func (x UploadInstructions_UploadStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UploadInstructions_UploadStrategy.Descriptor instead.
func (UploadInstructions_UploadStrategy) EnumDescriptor() ([]byte, []int) {
	return file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescGZIP(), []int{4, 0}
}

// Source is the source of the debuginfo.
type Debuginfo_Source int32

const (
	// To understand when no source is set we have the unknown source.
	Debuginfo_SOURCE_UNKNOWN_UNSPECIFIED Debuginfo_Source = 0
	// The debuginfo was uploaded by a user/agent.
	Debuginfo_SOURCE_UPLOAD Debuginfo_Source = 1
	// The debuginfo is available from the configured debuginfod server(s).
	Debuginfo_SOURCE_DEBUGINFOD Debuginfo_Source = 2
)

// Enum value maps for Debuginfo_Source.
var (
	Debuginfo_Source_name = map[int32]string{
		0: "SOURCE_UNKNOWN_UNSPECIFIED",
		1: "SOURCE_UPLOAD",
		2: "SOURCE_DEBUGINFOD",
	}
	Debuginfo_Source_value = map[string]int32{
		"SOURCE_UNKNOWN_UNSPECIFIED": 0,
		"SOURCE_UPLOAD":              1,
		"SOURCE_DEBUGINFOD":          2,
	}
)

func (x Debuginfo_Source) Enum() *Debuginfo_Source {
	p := new(Debuginfo_Source)
	*p = x
	return p
}

func (x Debuginfo_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Debuginfo_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_parca_debuginfo_v1alpha1_debuginfo_proto_enumTypes[1].Descriptor()
}

func (Debuginfo_Source) Type() protoreflect.EnumType {
	return &file_parca_debuginfo_v1alpha1_debuginfo_proto_enumTypes[1]
}

func (x Debuginfo_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Debuginfo_Source.Descriptor instead.
func (Debuginfo_Source) EnumDescriptor() ([]byte, []int) {
	return file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescGZIP(), []int{10, 0}
}

// The state of the debuginfo upload.
type DebuginfoUpload_State int32

const (
	// To understand when no upload state is set we have the unknown state.
	DebuginfoUpload_STATE_UNKNOWN_UNSPECIFIED DebuginfoUpload_State = 0
	// The debuginfo is currently being uploaded.
	DebuginfoUpload_STATE_UPLOADING DebuginfoUpload_State = 1
	// The debuginfo has been uploaded successfully.
	DebuginfoUpload_STATE_UPLOADED DebuginfoUpload_State = 2
)

// Enum value maps for DebuginfoUpload_State.
var (
	DebuginfoUpload_State_name = map[int32]string{
		0: "STATE_UNKNOWN_UNSPECIFIED",
		1: "STATE_UPLOADING",
		2: "STATE_UPLOADED",
	}
	DebuginfoUpload_State_value = map[string]int32{
		"STATE_UNKNOWN_UNSPECIFIED": 0,
		"STATE_UPLOADING":           1,
		"STATE_UPLOADED":            2,
	}
)

func (x DebuginfoUpload_State) Enum() *DebuginfoUpload_State {
	p := new(DebuginfoUpload_State)
	*p = x
	return p
}

func (x DebuginfoUpload_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DebuginfoUpload_State) Descriptor() protoreflect.EnumDescriptor {
	return file_parca_debuginfo_v1alpha1_debuginfo_proto_enumTypes[2].Descriptor()
}

func (DebuginfoUpload_State) Type() protoreflect.EnumType {
	return &file_parca_debuginfo_v1alpha1_debuginfo_proto_enumTypes[2]
}

func (x DebuginfoUpload_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DebuginfoUpload_State.Descriptor instead.
func (DebuginfoUpload_State) EnumDescriptor() ([]byte, []int) {
	return file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescGZIP(), []int{11, 0}
}

// ShouldInitiateUploadRequest is the request for ShouldInitiateUpload.
type ShouldInitiateUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The build_id of the debuginfo.
	BuildId string `protobuf:"bytes,1,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// Hash of the debuginfo to upload.
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *ShouldInitiateUploadRequest) Reset() {
	*x = ShouldInitiateUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShouldInitiateUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShouldInitiateUploadRequest) ProtoMessage() {}

func (x *ShouldInitiateUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShouldInitiateUploadRequest.ProtoReflect.Descriptor instead.
func (*ShouldInitiateUploadRequest) Descriptor() ([]byte, []int) {
	return file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescGZIP(), []int{0}
}

func (x *ShouldInitiateUploadRequest) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *ShouldInitiateUploadRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// ShouldInitiateUploadResponse is the response for ShouldInitiateUpload.
type ShouldInitiateUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether an upload should be initiated or not.
	ShouldInitiateUpload bool `protobuf:"varint,1,opt,name=should_initiate_upload,json=shouldInitiateUpload,proto3" json:"should_initiate_upload,omitempty"`
	// Reason for why an upload should be initiated or not.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ShouldInitiateUploadResponse) Reset() {
	*x = ShouldInitiateUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShouldInitiateUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShouldInitiateUploadResponse) ProtoMessage() {}

func (x *ShouldInitiateUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShouldInitiateUploadResponse.ProtoReflect.Descriptor instead.
func (*ShouldInitiateUploadResponse) Descriptor() ([]byte, []int) {
	return file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescGZIP(), []int{1}
}

func (x *ShouldInitiateUploadResponse) GetShouldInitiateUpload() bool {
	if x != nil {
		return x.ShouldInitiateUpload
	}
	return false
}

func (x *ShouldInitiateUploadResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// InitiateUploadRequest is the request to initiate an upload.
type InitiateUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The build_id of the debug info to upload.
	BuildId string `protobuf:"bytes,1,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// The size of the debug info to upload.
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// Hash of the debuginfo to upload.
	Hash string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *InitiateUploadRequest) Reset() {
	*x = InitiateUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiateUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateUploadRequest) ProtoMessage() {}

func (x *InitiateUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateUploadRequest.ProtoReflect.Descriptor instead.
func (*InitiateUploadRequest) Descriptor() ([]byte, []int) {
	return file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescGZIP(), []int{2}
}

func (x *InitiateUploadRequest) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *InitiateUploadRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *InitiateUploadRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// InitiateUploadResponse is the response to an InitiateUploadRequest.
type InitiateUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UploadInstructions contains the instructions for the client to upload the debuginfo.
	UploadInstructions *UploadInstructions `protobuf:"bytes,1,opt,name=upload_instructions,json=uploadInstructions,proto3" json:"upload_instructions,omitempty"`
}

func (x *InitiateUploadResponse) Reset() {
	*x = InitiateUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiateUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateUploadResponse) ProtoMessage() {}

func (x *InitiateUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateUploadResponse.ProtoReflect.Descriptor instead.
func (*InitiateUploadResponse) Descriptor() ([]byte, []int) {
	return file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescGZIP(), []int{3}
}

func (x *InitiateUploadResponse) GetUploadInstructions() *UploadInstructions {
	if x != nil {
		return x.UploadInstructions
	}
	return nil
}

// UploadInstructions contains the instructions for the client to upload debuginfo.
type UploadInstructions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The build ID of the debuginfo to upload.
	BuildId string `protobuf:"bytes,1,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// The upload_id to use for uploading.
	UploadId string `protobuf:"bytes,2,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	// The strategy to use for uploading.
	UploadStrategy UploadInstructions_UploadStrategy `protobuf:"varint,3,opt,name=upload_strategy,json=uploadStrategy,proto3,enum=parca.debuginfo.v1alpha1.UploadInstructions_UploadStrategy" json:"upload_strategy,omitempty"`
	// The signed url to use for uploading using a PUT request when the upload
	// strategy is SIGNED_STRATEGY_URL.
	SignedUrl string `protobuf:"bytes,4,opt,name=signed_url,json=signedUrl,proto3" json:"signed_url,omitempty"`
}

func (x *UploadInstructions) Reset() {
	*x = UploadInstructions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadInstructions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadInstructions) ProtoMessage() {}

func (x *UploadInstructions) ProtoReflect() protoreflect.Message {
	mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadInstructions.ProtoReflect.Descriptor instead.
func (*UploadInstructions) Descriptor() ([]byte, []int) {
	return file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescGZIP(), []int{4}
}

func (x *UploadInstructions) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *UploadInstructions) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *UploadInstructions) GetUploadStrategy() UploadInstructions_UploadStrategy {
	if x != nil {
		return x.UploadStrategy
	}
	return UploadInstructions_UPLOAD_STRATEGY_UNSPECIFIED
}

func (x *UploadInstructions) GetSignedUrl() string {
	if x != nil {
		return x.SignedUrl
	}
	return ""
}

// MarkUploadFinishedRequest is the request to mark an upload as finished.
type MarkUploadFinishedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The build_id of the debug info to mark as finished.
	BuildId string `protobuf:"bytes,1,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// The upload_id of the debug info to mark as finished.
	UploadId string `protobuf:"bytes,2,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
}

func (x *MarkUploadFinishedRequest) Reset() {
	*x = MarkUploadFinishedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkUploadFinishedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkUploadFinishedRequest) ProtoMessage() {}

func (x *MarkUploadFinishedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkUploadFinishedRequest.ProtoReflect.Descriptor instead.
func (*MarkUploadFinishedRequest) Descriptor() ([]byte, []int) {
	return file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescGZIP(), []int{5}
}

func (x *MarkUploadFinishedRequest) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *MarkUploadFinishedRequest) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

// MarkUploadFinishedResponse is the response to a MarkUploadFinishedRequest.
type MarkUploadFinishedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarkUploadFinishedResponse) Reset() {
	*x = MarkUploadFinishedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkUploadFinishedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkUploadFinishedResponse) ProtoMessage() {}

func (x *MarkUploadFinishedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkUploadFinishedResponse.ProtoReflect.Descriptor instead.
func (*MarkUploadFinishedResponse) Descriptor() ([]byte, []int) {
	return file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescGZIP(), []int{6}
}

// UploadRequest upload debug info
type UploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// data contains either the upload info metadata or the debug info
	//
	// Types that are assignable to Data:
	//
	//	*UploadRequest_Info
	//	*UploadRequest_ChunkData
	Data isUploadRequest_Data `protobuf_oneof:"data"`
}

func (x *UploadRequest) Reset() {
	*x = UploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRequest) ProtoMessage() {}

func (x *UploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRequest.ProtoReflect.Descriptor instead.
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescGZIP(), []int{7}
}

func (m *UploadRequest) GetData() isUploadRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *UploadRequest) GetInfo() *UploadInfo {
	if x, ok := x.GetData().(*UploadRequest_Info); ok {
		return x.Info
	}
	return nil
}

func (x *UploadRequest) GetChunkData() []byte {
	if x, ok := x.GetData().(*UploadRequest_ChunkData); ok {
		return x.ChunkData
	}
	return nil
}

type isUploadRequest_Data interface {
	isUploadRequest_Data()
}

type UploadRequest_Info struct {
	// info is the metadata for the debug info
	Info *UploadInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type UploadRequest_ChunkData struct {
	// chunk_data is the raw bytes of the debug info
	ChunkData []byte `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3,oneof"`
}

func (*UploadRequest_Info) isUploadRequest_Data() {}

func (*UploadRequest_ChunkData) isUploadRequest_Data() {}

// UploadInfo contains the build_id and other metadata for the debug data
type UploadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// build_id is a unique identifier for the debug data
	BuildId string `protobuf:"bytes,1,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// upload_id is a unique identifier for the upload
	UploadId string `protobuf:"bytes,2,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
}

func (x *UploadInfo) Reset() {
	*x = UploadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadInfo) ProtoMessage() {}

func (x *UploadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadInfo.ProtoReflect.Descriptor instead.
func (*UploadInfo) Descriptor() ([]byte, []int) {
	return file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescGZIP(), []int{8}
}

func (x *UploadInfo) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *UploadInfo) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

// UploadResponse returns the build_id and the size of the uploaded debug info
type UploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// build_id is a unique identifier for the debug data
	BuildId string `protobuf:"bytes,1,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// size is the number of bytes of the debug info
	Size uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *UploadResponse) Reset() {
	*x = UploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponse) ProtoMessage() {}

func (x *UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponse.ProtoReflect.Descriptor instead.
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescGZIP(), []int{9}
}

func (x *UploadResponse) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *UploadResponse) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// Debuginfo contains metadata about a debuginfo file.
type Debuginfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BuildID is the build ID of the debuginfo.
	BuildId string `protobuf:"bytes,1,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// Source is the source of the debuginfo.
	Source Debuginfo_Source `protobuf:"varint,2,opt,name=source,proto3,enum=parca.debuginfo.v1alpha1.Debuginfo_Source" json:"source,omitempty"`
	// DebuginfoUpload is the debuginfo upload metadata.
	Upload *DebuginfoUpload `protobuf:"bytes,3,opt,name=upload,proto3" json:"upload,omitempty"`
	// Quality is the quality of the debuginfo. This is set asynchonously by the
	// symbolizer when the debuginfo is actually used.
	Quality *DebuginfoQuality `protobuf:"bytes,4,opt,name=quality,proto3" json:"quality,omitempty"`
}

func (x *Debuginfo) Reset() {
	*x = Debuginfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Debuginfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Debuginfo) ProtoMessage() {}

func (x *Debuginfo) ProtoReflect() protoreflect.Message {
	mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Debuginfo.ProtoReflect.Descriptor instead.
func (*Debuginfo) Descriptor() ([]byte, []int) {
	return file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescGZIP(), []int{10}
}

func (x *Debuginfo) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *Debuginfo) GetSource() Debuginfo_Source {
	if x != nil {
		return x.Source
	}
	return Debuginfo_SOURCE_UNKNOWN_UNSPECIFIED
}

func (x *Debuginfo) GetUpload() *DebuginfoUpload {
	if x != nil {
		return x.Upload
	}
	return nil
}

func (x *Debuginfo) GetQuality() *DebuginfoQuality {
	if x != nil {
		return x.Quality
	}
	return nil
}

// DebuginfoUpload contains metadata about a debuginfo upload.
type DebuginfoUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UploadID is the ID of the debuginfo upload.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Hash is the hash of the debuginfo.
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// State is the current state of the debuginfo upload.
	State DebuginfoUpload_State `protobuf:"varint,3,opt,name=state,proto3,enum=parca.debuginfo.v1alpha1.DebuginfoUpload_State" json:"state,omitempty"`
	// StartedAt is the time the debuginfo upload was started.
	StartedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// FinishedAt is the time the debuginfo upload was finished.
	FinishedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
}

func (x *DebuginfoUpload) Reset() {
	*x = DebuginfoUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebuginfoUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebuginfoUpload) ProtoMessage() {}

func (x *DebuginfoUpload) ProtoReflect() protoreflect.Message {
	mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebuginfoUpload.ProtoReflect.Descriptor instead.
func (*DebuginfoUpload) Descriptor() ([]byte, []int) {
	return file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescGZIP(), []int{11}
}

func (x *DebuginfoUpload) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DebuginfoUpload) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *DebuginfoUpload) GetState() DebuginfoUpload_State {
	if x != nil {
		return x.State
	}
	return DebuginfoUpload_STATE_UNKNOWN_UNSPECIFIED
}

func (x *DebuginfoUpload) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *DebuginfoUpload) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

// DebuginfoQuality is the quality of the debuginfo.
type DebuginfoQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The debuginfo file is not a valid ELF file.
	NotValidElf bool `protobuf:"varint,1,opt,name=not_valid_elf,json=notValidElf,proto3" json:"not_valid_elf,omitempty"`
	// Whether the debuginfo contains dwarf information.
	HasDwarf bool `protobuf:"varint,2,opt,name=has_dwarf,json=hasDwarf,proto3" json:"has_dwarf,omitempty"`
	// Whether the debuginfo contains Go's pclntab.
	HasGoPclntab bool `protobuf:"varint,3,opt,name=has_go_pclntab,json=hasGoPclntab,proto3" json:"has_go_pclntab,omitempty"`
	// Whether the debuginfo contains symtab.
	HasSymtab bool `protobuf:"varint,4,opt,name=has_symtab,json=hasSymtab,proto3" json:"has_symtab,omitempty"`
	// Whether the debuginfo contains dynsym.
	HasDynsym bool `protobuf:"varint,5,opt,name=has_dynsym,json=hasDynsym,proto3" json:"has_dynsym,omitempty"`
}

func (x *DebuginfoQuality) Reset() {
	*x = DebuginfoQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebuginfoQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebuginfoQuality) ProtoMessage() {}

func (x *DebuginfoQuality) ProtoReflect() protoreflect.Message {
	mi := &file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebuginfoQuality.ProtoReflect.Descriptor instead.
func (*DebuginfoQuality) Descriptor() ([]byte, []int) {
	return file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescGZIP(), []int{12}
}

func (x *DebuginfoQuality) GetNotValidElf() bool {
	if x != nil {
		return x.NotValidElf
	}
	return false
}

func (x *DebuginfoQuality) GetHasDwarf() bool {
	if x != nil {
		return x.HasDwarf
	}
	return false
}

func (x *DebuginfoQuality) GetHasGoPclntab() bool {
	if x != nil {
		return x.HasGoPclntab
	}
	return false
}

func (x *DebuginfoQuality) GetHasSymtab() bool {
	if x != nil {
		return x.HasSymtab
	}
	return false
}

func (x *DebuginfoQuality) GetHasDynsym() bool {
	if x != nil {
		return x.HasDynsym
	}
	return false
}

var File_parca_debuginfo_v1alpha1_debuginfo_proto protoreflect.FileDescriptor

var file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDesc = []byte{
	0x0a, 0x28, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66,
	0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x70, 0x61, 0x72, 0x63,
	0x61, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x1b, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x22, 0x6c, 0x0a, 0x1c, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x5a, 0x0a, 0x15, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x77, 0x0a,
	0x16, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x12, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbe, 0x02, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b,
	0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0e, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x6b, 0x0a, 0x0e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1f, 0x0a, 0x1b,
	0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59,
	0x5f, 0x47, 0x52, 0x50, 0x43, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x50, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x45,
	0x44, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0x02, 0x22, 0x53, 0x0a, 0x19, 0x4d, 0x61, 0x72, 0x6b, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a,
	0x4d, 0x61, 0x72, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x0a, 0x0d, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x61, 0x72, 0x63,
	0x61, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x44, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x09, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x42, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61,
	0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x52, 0x0a,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x49, 0x4e, 0x46, 0x4f, 0x44, 0x10,
	0x02, 0x22, 0xc5, 0x02, 0x0a, 0x0f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61,
	0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x22, 0x4f, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x50, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x44, 0x10, 0x02, 0x22, 0xb7, 0x01, 0x0a, 0x10, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22,
	0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x6c, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x45,
	0x6c, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x77, 0x61, 0x72, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x44, 0x77, 0x61, 0x72, 0x66, 0x12,
	0x24, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x63, 0x6c, 0x6e, 0x74, 0x61,
	0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x47, 0x6f, 0x50, 0x63,
	0x6c, 0x6e, 0x74, 0x61, 0x62, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x79, 0x6d,
	0x74, 0x61, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x53, 0x79,
	0x6d, 0x74, 0x61, 0x62, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x79, 0x6e, 0x73,
	0x79, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x44, 0x79, 0x6e,
	0x73, 0x79, 0x6d, 0x32, 0xf8, 0x03, 0x0a, 0x10, 0x44, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x27, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x61,
	0x72, 0x63, 0x61, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x53, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x35, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x61, 0x72, 0x63,
	0x61, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x0e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2f, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x4d,
	0x61, 0x72, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x12, 0x33, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x84,
	0x02, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42,
	0x0e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61,
	0x72, 0x63, 0x61, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x61, 0x72, 0x63, 0x61,
	0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x3b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x44, 0x58, 0xaa, 0x02, 0x18, 0x50, 0x61,
	0x72, 0x63, 0x61, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x18, 0x50, 0x61, 0x72, 0x63, 0x61, 0x5c, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0xe2, 0x02, 0x24, 0x50, 0x61, 0x72, 0x63, 0x61, 0x5c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x69,
	0x6e, 0x66, 0x6f, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x50, 0x61, 0x72, 0x63, 0x61,
	0x3a, 0x3a, 0x44, 0x65, 0x62, 0x75, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x3a, 0x3a, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescOnce sync.Once
	file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescData = file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDesc
)

func file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescGZIP() []byte {
	file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescOnce.Do(func() {
		file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescData = protoimpl.X.CompressGZIP(file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescData)
	})
	return file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDescData
}

var file_parca_debuginfo_v1alpha1_debuginfo_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_parca_debuginfo_v1alpha1_debuginfo_proto_goTypes = []interface{}{
	(UploadInstructions_UploadStrategy)(0), // 0: parca.debuginfo.v1alpha1.UploadInstructions.UploadStrategy
	(Debuginfo_Source)(0),                  // 1: parca.debuginfo.v1alpha1.Debuginfo.Source
	(DebuginfoUpload_State)(0),             // 2: parca.debuginfo.v1alpha1.DebuginfoUpload.State
	(*ShouldInitiateUploadRequest)(nil),    // 3: parca.debuginfo.v1alpha1.ShouldInitiateUploadRequest
	(*ShouldInitiateUploadResponse)(nil),   // 4: parca.debuginfo.v1alpha1.ShouldInitiateUploadResponse
	(*InitiateUploadRequest)(nil),          // 5: parca.debuginfo.v1alpha1.InitiateUploadRequest
	(*InitiateUploadResponse)(nil),         // 6: parca.debuginfo.v1alpha1.InitiateUploadResponse
	(*UploadInstructions)(nil),             // 7: parca.debuginfo.v1alpha1.UploadInstructions
	(*MarkUploadFinishedRequest)(nil),      // 8: parca.debuginfo.v1alpha1.MarkUploadFinishedRequest
	(*MarkUploadFinishedResponse)(nil),     // 9: parca.debuginfo.v1alpha1.MarkUploadFinishedResponse
	(*UploadRequest)(nil),                  // 10: parca.debuginfo.v1alpha1.UploadRequest
	(*UploadInfo)(nil),                     // 11: parca.debuginfo.v1alpha1.UploadInfo
	(*UploadResponse)(nil),                 // 12: parca.debuginfo.v1alpha1.UploadResponse
	(*Debuginfo)(nil),                      // 13: parca.debuginfo.v1alpha1.Debuginfo
	(*DebuginfoUpload)(nil),                // 14: parca.debuginfo.v1alpha1.DebuginfoUpload
	(*DebuginfoQuality)(nil),               // 15: parca.debuginfo.v1alpha1.DebuginfoQuality
	(*timestamppb.Timestamp)(nil),          // 16: google.protobuf.Timestamp
}
var file_parca_debuginfo_v1alpha1_debuginfo_proto_depIdxs = []int32{
	7,  // 0: parca.debuginfo.v1alpha1.InitiateUploadResponse.upload_instructions:type_name -> parca.debuginfo.v1alpha1.UploadInstructions
	0,  // 1: parca.debuginfo.v1alpha1.UploadInstructions.upload_strategy:type_name -> parca.debuginfo.v1alpha1.UploadInstructions.UploadStrategy
	11, // 2: parca.debuginfo.v1alpha1.UploadRequest.info:type_name -> parca.debuginfo.v1alpha1.UploadInfo
	1,  // 3: parca.debuginfo.v1alpha1.Debuginfo.source:type_name -> parca.debuginfo.v1alpha1.Debuginfo.Source
	14, // 4: parca.debuginfo.v1alpha1.Debuginfo.upload:type_name -> parca.debuginfo.v1alpha1.DebuginfoUpload
	15, // 5: parca.debuginfo.v1alpha1.Debuginfo.quality:type_name -> parca.debuginfo.v1alpha1.DebuginfoQuality
	2,  // 6: parca.debuginfo.v1alpha1.DebuginfoUpload.state:type_name -> parca.debuginfo.v1alpha1.DebuginfoUpload.State
	16, // 7: parca.debuginfo.v1alpha1.DebuginfoUpload.started_at:type_name -> google.protobuf.Timestamp
	16, // 8: parca.debuginfo.v1alpha1.DebuginfoUpload.finished_at:type_name -> google.protobuf.Timestamp
	10, // 9: parca.debuginfo.v1alpha1.DebuginfoService.Upload:input_type -> parca.debuginfo.v1alpha1.UploadRequest
	3,  // 10: parca.debuginfo.v1alpha1.DebuginfoService.ShouldInitiateUpload:input_type -> parca.debuginfo.v1alpha1.ShouldInitiateUploadRequest
	5,  // 11: parca.debuginfo.v1alpha1.DebuginfoService.InitiateUpload:input_type -> parca.debuginfo.v1alpha1.InitiateUploadRequest
	8,  // 12: parca.debuginfo.v1alpha1.DebuginfoService.MarkUploadFinished:input_type -> parca.debuginfo.v1alpha1.MarkUploadFinishedRequest
	12, // 13: parca.debuginfo.v1alpha1.DebuginfoService.Upload:output_type -> parca.debuginfo.v1alpha1.UploadResponse
	4,  // 14: parca.debuginfo.v1alpha1.DebuginfoService.ShouldInitiateUpload:output_type -> parca.debuginfo.v1alpha1.ShouldInitiateUploadResponse
	6,  // 15: parca.debuginfo.v1alpha1.DebuginfoService.InitiateUpload:output_type -> parca.debuginfo.v1alpha1.InitiateUploadResponse
	9,  // 16: parca.debuginfo.v1alpha1.DebuginfoService.MarkUploadFinished:output_type -> parca.debuginfo.v1alpha1.MarkUploadFinishedResponse
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_parca_debuginfo_v1alpha1_debuginfo_proto_init() }
func file_parca_debuginfo_v1alpha1_debuginfo_proto_init() {
	if File_parca_debuginfo_v1alpha1_debuginfo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShouldInitiateUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShouldInitiateUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiateUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiateUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadInstructions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkUploadFinishedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkUploadFinishedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Debuginfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebuginfoUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebuginfoQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*UploadRequest_Info)(nil),
		(*UploadRequest_ChunkData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_parca_debuginfo_v1alpha1_debuginfo_proto_goTypes,
		DependencyIndexes: file_parca_debuginfo_v1alpha1_debuginfo_proto_depIdxs,
		EnumInfos:         file_parca_debuginfo_v1alpha1_debuginfo_proto_enumTypes,
		MessageInfos:      file_parca_debuginfo_v1alpha1_debuginfo_proto_msgTypes,
	}.Build()
	File_parca_debuginfo_v1alpha1_debuginfo_proto = out.File
	file_parca_debuginfo_v1alpha1_debuginfo_proto_rawDesc = nil
	file_parca_debuginfo_v1alpha1_debuginfo_proto_goTypes = nil
	file_parca_debuginfo_v1alpha1_debuginfo_proto_depIdxs = nil
}
