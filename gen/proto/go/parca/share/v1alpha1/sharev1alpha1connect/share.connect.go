// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: parca/share/v1alpha1/share.proto

package sharev1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/parca-dev/parca/gen/proto/go/parca/share/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ShareServiceName is the fully-qualified name of the ShareService service.
	ShareServiceName = "parca.share.v1alpha1.ShareService"
)

// ShareServiceClient is a client for the parca.share.v1alpha1.ShareService service.
type ShareServiceClient interface {
	// Uploads the profile and returns the link that can be used to access it.
	Upload(context.Context, *connect_go.Request[v1alpha1.UploadRequest]) (*connect_go.Response[v1alpha1.UploadResponse], error)
	// Query performs a profile query
	Query(context.Context, *connect_go.Request[v1alpha1.QueryRequest]) (*connect_go.Response[v1alpha1.QueryResponse], error)
	// ProfileTypes returns the list of available profile types.
	ProfileTypes(context.Context, *connect_go.Request[v1alpha1.ProfileTypesRequest]) (*connect_go.Response[v1alpha1.ProfileTypesResponse], error)
}

// NewShareServiceClient constructs a client for the parca.share.v1alpha1.ShareService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewShareServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ShareServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &shareServiceClient{
		upload: connect_go.NewClient[v1alpha1.UploadRequest, v1alpha1.UploadResponse](
			httpClient,
			baseURL+"/parca.share.v1alpha1.ShareService/Upload",
			opts...,
		),
		query: connect_go.NewClient[v1alpha1.QueryRequest, v1alpha1.QueryResponse](
			httpClient,
			baseURL+"/parca.share.v1alpha1.ShareService/Query",
			opts...,
		),
		profileTypes: connect_go.NewClient[v1alpha1.ProfileTypesRequest, v1alpha1.ProfileTypesResponse](
			httpClient,
			baseURL+"/parca.share.v1alpha1.ShareService/ProfileTypes",
			opts...,
		),
	}
}

// shareServiceClient implements ShareServiceClient.
type shareServiceClient struct {
	upload       *connect_go.Client[v1alpha1.UploadRequest, v1alpha1.UploadResponse]
	query        *connect_go.Client[v1alpha1.QueryRequest, v1alpha1.QueryResponse]
	profileTypes *connect_go.Client[v1alpha1.ProfileTypesRequest, v1alpha1.ProfileTypesResponse]
}

// Upload calls parca.share.v1alpha1.ShareService.Upload.
func (c *shareServiceClient) Upload(ctx context.Context, req *connect_go.Request[v1alpha1.UploadRequest]) (*connect_go.Response[v1alpha1.UploadResponse], error) {
	return c.upload.CallUnary(ctx, req)
}

// Query calls parca.share.v1alpha1.ShareService.Query.
func (c *shareServiceClient) Query(ctx context.Context, req *connect_go.Request[v1alpha1.QueryRequest]) (*connect_go.Response[v1alpha1.QueryResponse], error) {
	return c.query.CallUnary(ctx, req)
}

// ProfileTypes calls parca.share.v1alpha1.ShareService.ProfileTypes.
func (c *shareServiceClient) ProfileTypes(ctx context.Context, req *connect_go.Request[v1alpha1.ProfileTypesRequest]) (*connect_go.Response[v1alpha1.ProfileTypesResponse], error) {
	return c.profileTypes.CallUnary(ctx, req)
}

// ShareServiceHandler is an implementation of the parca.share.v1alpha1.ShareService service.
type ShareServiceHandler interface {
	// Uploads the profile and returns the link that can be used to access it.
	Upload(context.Context, *connect_go.Request[v1alpha1.UploadRequest]) (*connect_go.Response[v1alpha1.UploadResponse], error)
	// Query performs a profile query
	Query(context.Context, *connect_go.Request[v1alpha1.QueryRequest]) (*connect_go.Response[v1alpha1.QueryResponse], error)
	// ProfileTypes returns the list of available profile types.
	ProfileTypes(context.Context, *connect_go.Request[v1alpha1.ProfileTypesRequest]) (*connect_go.Response[v1alpha1.ProfileTypesResponse], error)
}

// NewShareServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewShareServiceHandler(svc ShareServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/parca.share.v1alpha1.ShareService/Upload", connect_go.NewUnaryHandler(
		"/parca.share.v1alpha1.ShareService/Upload",
		svc.Upload,
		opts...,
	))
	mux.Handle("/parca.share.v1alpha1.ShareService/Query", connect_go.NewUnaryHandler(
		"/parca.share.v1alpha1.ShareService/Query",
		svc.Query,
		opts...,
	))
	mux.Handle("/parca.share.v1alpha1.ShareService/ProfileTypes", connect_go.NewUnaryHandler(
		"/parca.share.v1alpha1.ShareService/ProfileTypes",
		svc.ProfileTypes,
		opts...,
	))
	return "/parca.share.v1alpha1.ShareService/", mux
}

// UnimplementedShareServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedShareServiceHandler struct{}

func (UnimplementedShareServiceHandler) Upload(context.Context, *connect_go.Request[v1alpha1.UploadRequest]) (*connect_go.Response[v1alpha1.UploadResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("parca.share.v1alpha1.ShareService.Upload is not implemented"))
}

func (UnimplementedShareServiceHandler) Query(context.Context, *connect_go.Request[v1alpha1.QueryRequest]) (*connect_go.Response[v1alpha1.QueryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("parca.share.v1alpha1.ShareService.Query is not implemented"))
}

func (UnimplementedShareServiceHandler) ProfileTypes(context.Context, *connect_go.Request[v1alpha1.ProfileTypesRequest]) (*connect_go.Response[v1alpha1.ProfileTypesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("parca.share.v1alpha1.ShareService.ProfileTypes is not implemented"))
}
