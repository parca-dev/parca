// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: parca/query/v1alpha1/query.proto

package queryv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/parca-dev/parca/gen/proto/go/parca/query/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// QueryServiceName is the fully-qualified name of the QueryService service.
	QueryServiceName = "parca.query.v1alpha1.QueryService"
)

// QueryServiceClient is a client for the parca.query.v1alpha1.QueryService service.
type QueryServiceClient interface {
	// QueryRange performs a profile query over a time range
	QueryRange(context.Context, *connect_go.Request[v1alpha1.QueryRangeRequest]) (*connect_go.Response[v1alpha1.QueryRangeResponse], error)
	// Query performs a profile query
	Query(context.Context, *connect_go.Request[v1alpha1.QueryRequest]) (*connect_go.Response[v1alpha1.QueryResponse], error)
	// Series is unimplemented
	Series(context.Context, *connect_go.Request[v1alpha1.SeriesRequest]) (*connect_go.Response[v1alpha1.SeriesResponse], error)
	// ProfileTypes returns the list of available profile types.
	ProfileTypes(context.Context, *connect_go.Request[v1alpha1.ProfileTypesRequest]) (*connect_go.Response[v1alpha1.ProfileTypesResponse], error)
	// Labels returns the set of label names against a given matching string and time frame
	Labels(context.Context, *connect_go.Request[v1alpha1.LabelsRequest]) (*connect_go.Response[v1alpha1.LabelsResponse], error)
	// Values returns the set of values that match a given label and time frame
	Values(context.Context, *connect_go.Request[v1alpha1.ValuesRequest]) (*connect_go.Response[v1alpha1.ValuesResponse], error)
	// ShareProfile uploads the given profile to pprof.me and returns a link to the profile.
	ShareProfile(context.Context, *connect_go.Request[v1alpha1.ShareProfileRequest]) (*connect_go.Response[v1alpha1.ShareProfileResponse], error)
}

// NewQueryServiceClient constructs a client for the parca.query.v1alpha1.QueryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQueryServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) QueryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &queryServiceClient{
		queryRange: connect_go.NewClient[v1alpha1.QueryRangeRequest, v1alpha1.QueryRangeResponse](
			httpClient,
			baseURL+"/parca.query.v1alpha1.QueryService/QueryRange",
			opts...,
		),
		query: connect_go.NewClient[v1alpha1.QueryRequest, v1alpha1.QueryResponse](
			httpClient,
			baseURL+"/parca.query.v1alpha1.QueryService/Query",
			opts...,
		),
		series: connect_go.NewClient[v1alpha1.SeriesRequest, v1alpha1.SeriesResponse](
			httpClient,
			baseURL+"/parca.query.v1alpha1.QueryService/Series",
			opts...,
		),
		profileTypes: connect_go.NewClient[v1alpha1.ProfileTypesRequest, v1alpha1.ProfileTypesResponse](
			httpClient,
			baseURL+"/parca.query.v1alpha1.QueryService/ProfileTypes",
			opts...,
		),
		labels: connect_go.NewClient[v1alpha1.LabelsRequest, v1alpha1.LabelsResponse](
			httpClient,
			baseURL+"/parca.query.v1alpha1.QueryService/Labels",
			opts...,
		),
		values: connect_go.NewClient[v1alpha1.ValuesRequest, v1alpha1.ValuesResponse](
			httpClient,
			baseURL+"/parca.query.v1alpha1.QueryService/Values",
			opts...,
		),
		shareProfile: connect_go.NewClient[v1alpha1.ShareProfileRequest, v1alpha1.ShareProfileResponse](
			httpClient,
			baseURL+"/parca.query.v1alpha1.QueryService/ShareProfile",
			opts...,
		),
	}
}

// queryServiceClient implements QueryServiceClient.
type queryServiceClient struct {
	queryRange   *connect_go.Client[v1alpha1.QueryRangeRequest, v1alpha1.QueryRangeResponse]
	query        *connect_go.Client[v1alpha1.QueryRequest, v1alpha1.QueryResponse]
	series       *connect_go.Client[v1alpha1.SeriesRequest, v1alpha1.SeriesResponse]
	profileTypes *connect_go.Client[v1alpha1.ProfileTypesRequest, v1alpha1.ProfileTypesResponse]
	labels       *connect_go.Client[v1alpha1.LabelsRequest, v1alpha1.LabelsResponse]
	values       *connect_go.Client[v1alpha1.ValuesRequest, v1alpha1.ValuesResponse]
	shareProfile *connect_go.Client[v1alpha1.ShareProfileRequest, v1alpha1.ShareProfileResponse]
}

// QueryRange calls parca.query.v1alpha1.QueryService.QueryRange.
func (c *queryServiceClient) QueryRange(ctx context.Context, req *connect_go.Request[v1alpha1.QueryRangeRequest]) (*connect_go.Response[v1alpha1.QueryRangeResponse], error) {
	return c.queryRange.CallUnary(ctx, req)
}

// Query calls parca.query.v1alpha1.QueryService.Query.
func (c *queryServiceClient) Query(ctx context.Context, req *connect_go.Request[v1alpha1.QueryRequest]) (*connect_go.Response[v1alpha1.QueryResponse], error) {
	return c.query.CallUnary(ctx, req)
}

// Series calls parca.query.v1alpha1.QueryService.Series.
func (c *queryServiceClient) Series(ctx context.Context, req *connect_go.Request[v1alpha1.SeriesRequest]) (*connect_go.Response[v1alpha1.SeriesResponse], error) {
	return c.series.CallUnary(ctx, req)
}

// ProfileTypes calls parca.query.v1alpha1.QueryService.ProfileTypes.
func (c *queryServiceClient) ProfileTypes(ctx context.Context, req *connect_go.Request[v1alpha1.ProfileTypesRequest]) (*connect_go.Response[v1alpha1.ProfileTypesResponse], error) {
	return c.profileTypes.CallUnary(ctx, req)
}

// Labels calls parca.query.v1alpha1.QueryService.Labels.
func (c *queryServiceClient) Labels(ctx context.Context, req *connect_go.Request[v1alpha1.LabelsRequest]) (*connect_go.Response[v1alpha1.LabelsResponse], error) {
	return c.labels.CallUnary(ctx, req)
}

// Values calls parca.query.v1alpha1.QueryService.Values.
func (c *queryServiceClient) Values(ctx context.Context, req *connect_go.Request[v1alpha1.ValuesRequest]) (*connect_go.Response[v1alpha1.ValuesResponse], error) {
	return c.values.CallUnary(ctx, req)
}

// ShareProfile calls parca.query.v1alpha1.QueryService.ShareProfile.
func (c *queryServiceClient) ShareProfile(ctx context.Context, req *connect_go.Request[v1alpha1.ShareProfileRequest]) (*connect_go.Response[v1alpha1.ShareProfileResponse], error) {
	return c.shareProfile.CallUnary(ctx, req)
}

// QueryServiceHandler is an implementation of the parca.query.v1alpha1.QueryService service.
type QueryServiceHandler interface {
	// QueryRange performs a profile query over a time range
	QueryRange(context.Context, *connect_go.Request[v1alpha1.QueryRangeRequest]) (*connect_go.Response[v1alpha1.QueryRangeResponse], error)
	// Query performs a profile query
	Query(context.Context, *connect_go.Request[v1alpha1.QueryRequest]) (*connect_go.Response[v1alpha1.QueryResponse], error)
	// Series is unimplemented
	Series(context.Context, *connect_go.Request[v1alpha1.SeriesRequest]) (*connect_go.Response[v1alpha1.SeriesResponse], error)
	// ProfileTypes returns the list of available profile types.
	ProfileTypes(context.Context, *connect_go.Request[v1alpha1.ProfileTypesRequest]) (*connect_go.Response[v1alpha1.ProfileTypesResponse], error)
	// Labels returns the set of label names against a given matching string and time frame
	Labels(context.Context, *connect_go.Request[v1alpha1.LabelsRequest]) (*connect_go.Response[v1alpha1.LabelsResponse], error)
	// Values returns the set of values that match a given label and time frame
	Values(context.Context, *connect_go.Request[v1alpha1.ValuesRequest]) (*connect_go.Response[v1alpha1.ValuesResponse], error)
	// ShareProfile uploads the given profile to pprof.me and returns a link to the profile.
	ShareProfile(context.Context, *connect_go.Request[v1alpha1.ShareProfileRequest]) (*connect_go.Response[v1alpha1.ShareProfileResponse], error)
}

// NewQueryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQueryServiceHandler(svc QueryServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/parca.query.v1alpha1.QueryService/QueryRange", connect_go.NewUnaryHandler(
		"/parca.query.v1alpha1.QueryService/QueryRange",
		svc.QueryRange,
		opts...,
	))
	mux.Handle("/parca.query.v1alpha1.QueryService/Query", connect_go.NewUnaryHandler(
		"/parca.query.v1alpha1.QueryService/Query",
		svc.Query,
		opts...,
	))
	mux.Handle("/parca.query.v1alpha1.QueryService/Series", connect_go.NewUnaryHandler(
		"/parca.query.v1alpha1.QueryService/Series",
		svc.Series,
		opts...,
	))
	mux.Handle("/parca.query.v1alpha1.QueryService/ProfileTypes", connect_go.NewUnaryHandler(
		"/parca.query.v1alpha1.QueryService/ProfileTypes",
		svc.ProfileTypes,
		opts...,
	))
	mux.Handle("/parca.query.v1alpha1.QueryService/Labels", connect_go.NewUnaryHandler(
		"/parca.query.v1alpha1.QueryService/Labels",
		svc.Labels,
		opts...,
	))
	mux.Handle("/parca.query.v1alpha1.QueryService/Values", connect_go.NewUnaryHandler(
		"/parca.query.v1alpha1.QueryService/Values",
		svc.Values,
		opts...,
	))
	mux.Handle("/parca.query.v1alpha1.QueryService/ShareProfile", connect_go.NewUnaryHandler(
		"/parca.query.v1alpha1.QueryService/ShareProfile",
		svc.ShareProfile,
		opts...,
	))
	return "/parca.query.v1alpha1.QueryService/", mux
}

// UnimplementedQueryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedQueryServiceHandler struct{}

func (UnimplementedQueryServiceHandler) QueryRange(context.Context, *connect_go.Request[v1alpha1.QueryRangeRequest]) (*connect_go.Response[v1alpha1.QueryRangeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("parca.query.v1alpha1.QueryService.QueryRange is not implemented"))
}

func (UnimplementedQueryServiceHandler) Query(context.Context, *connect_go.Request[v1alpha1.QueryRequest]) (*connect_go.Response[v1alpha1.QueryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("parca.query.v1alpha1.QueryService.Query is not implemented"))
}

func (UnimplementedQueryServiceHandler) Series(context.Context, *connect_go.Request[v1alpha1.SeriesRequest]) (*connect_go.Response[v1alpha1.SeriesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("parca.query.v1alpha1.QueryService.Series is not implemented"))
}

func (UnimplementedQueryServiceHandler) ProfileTypes(context.Context, *connect_go.Request[v1alpha1.ProfileTypesRequest]) (*connect_go.Response[v1alpha1.ProfileTypesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("parca.query.v1alpha1.QueryService.ProfileTypes is not implemented"))
}

func (UnimplementedQueryServiceHandler) Labels(context.Context, *connect_go.Request[v1alpha1.LabelsRequest]) (*connect_go.Response[v1alpha1.LabelsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("parca.query.v1alpha1.QueryService.Labels is not implemented"))
}

func (UnimplementedQueryServiceHandler) Values(context.Context, *connect_go.Request[v1alpha1.ValuesRequest]) (*connect_go.Response[v1alpha1.ValuesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("parca.query.v1alpha1.QueryService.Values is not implemented"))
}

func (UnimplementedQueryServiceHandler) ShareProfile(context.Context, *connect_go.Request[v1alpha1.ShareProfileRequest]) (*connect_go.Response[v1alpha1.ShareProfileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("parca.query.v1alpha1.QueryService.ShareProfile is not implemented"))
}
