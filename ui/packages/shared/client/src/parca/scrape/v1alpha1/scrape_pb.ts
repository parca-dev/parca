// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file parca/scrape/v1alpha1/scrape.proto (package parca.scrape.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { LabelSet } from "../../profilestore/v1alpha1/profilestore_pb.js";

/**
 * TargetsRequest contains the parameters for the set of targets to return
 *
 * @generated from message parca.scrape.v1alpha1.TargetsRequest
 */
export class TargetsRequest extends Message<TargetsRequest> {
  /**
   * state is the state of targets to returns
   *
   * @generated from field: parca.scrape.v1alpha1.TargetsRequest.State state = 1;
   */
  state = TargetsRequest_State.ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<TargetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.scrape.v1alpha1.TargetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(TargetsRequest_State) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TargetsRequest {
    return new TargetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TargetsRequest {
    return new TargetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TargetsRequest {
    return new TargetsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TargetsRequest | PlainMessage<TargetsRequest> | undefined, b: TargetsRequest | PlainMessage<TargetsRequest> | undefined): boolean {
    return proto3.util.equals(TargetsRequest, a, b);
  }
}

/**
 * State represents the current state of a target
 *
 * @generated from enum parca.scrape.v1alpha1.TargetsRequest.State
 */
export enum TargetsRequest_State {
  /**
   * STATE_ANY_UNSPECIFIED unspecified
   *
   * @generated from enum value: STATE_ANY_UNSPECIFIED = 0;
   */
  ANY_UNSPECIFIED = 0,

  /**
   * STATE_ACTIVE target active state
   *
   * @generated from enum value: STATE_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * STATE_DROPPED target dropped state
   *
   * @generated from enum value: STATE_DROPPED = 2;
   */
  DROPPED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(TargetsRequest_State)
proto3.util.setEnumType(TargetsRequest_State, "parca.scrape.v1alpha1.TargetsRequest.State", [
  { no: 0, name: "STATE_ANY_UNSPECIFIED" },
  { no: 1, name: "STATE_ACTIVE" },
  { no: 2, name: "STATE_DROPPED" },
]);

/**
 * TargetsResponse is the set of targets for the given requested state
 *
 * @generated from message parca.scrape.v1alpha1.TargetsResponse
 */
export class TargetsResponse extends Message<TargetsResponse> {
  /**
   * targets is the mapping of targets
   *
   * @generated from field: map<string, parca.scrape.v1alpha1.Targets> targets = 1;
   */
  targets: { [key: string]: Targets } = {};

  constructor(data?: PartialMessage<TargetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.scrape.v1alpha1.TargetsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "targets", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Targets} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TargetsResponse {
    return new TargetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TargetsResponse {
    return new TargetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TargetsResponse {
    return new TargetsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TargetsResponse | PlainMessage<TargetsResponse> | undefined, b: TargetsResponse | PlainMessage<TargetsResponse> | undefined): boolean {
    return proto3.util.equals(TargetsResponse, a, b);
  }
}

/**
 * Targets is a list of targets
 *
 * @generated from message parca.scrape.v1alpha1.Targets
 */
export class Targets extends Message<Targets> {
  /**
   * targets is a list of targets
   *
   * @generated from field: repeated parca.scrape.v1alpha1.Target targets = 1;
   */
  targets: Target[] = [];

  constructor(data?: PartialMessage<Targets>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.scrape.v1alpha1.Targets";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "targets", kind: "message", T: Target, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Targets {
    return new Targets().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Targets {
    return new Targets().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Targets {
    return new Targets().fromJsonString(jsonString, options);
  }

  static equals(a: Targets | PlainMessage<Targets> | undefined, b: Targets | PlainMessage<Targets> | undefined): boolean {
    return proto3.util.equals(Targets, a, b);
  }
}

/**
 * Target is the scrape target representation
 *
 * @generated from message parca.scrape.v1alpha1.Target
 */
export class Target extends Message<Target> {
  /**
   * discovered_labels are the set of labels for the target that have been discovered
   *
   * @generated from field: parca.profilestore.v1alpha1.LabelSet discovered_labels = 1;
   */
  discoveredLabels?: LabelSet;

  /**
   * labels are the set of labels given for the target
   *
   * @generated from field: parca.profilestore.v1alpha1.LabelSet labels = 2;
   */
  labels?: LabelSet;

  /**
   * last_error is the error message most recently received from a scrape attempt
   *
   * @generated from field: string last_error = 3;
   */
  lastError = "";

  /**
   * last_scrape is the time stamp the last scrape request was performed
   *
   * @generated from field: google.protobuf.Timestamp last_scrape = 4;
   */
  lastScrape?: Timestamp;

  /**
   * last_scrape_duration is the duration of the last scrape request
   *
   * @generated from field: google.protobuf.Duration last_scrape_duration = 5;
   */
  lastScrapeDuration?: Duration;

  /**
   * url is the url of the target
   *
   * @generated from field: string url = 6;
   */
  url = "";

  /**
   * health indicates the current health of the target
   *
   * @generated from field: parca.scrape.v1alpha1.Target.Health health = 7;
   */
  health = Target_Health.UNKNOWN_UNSPECIFIED;

  constructor(data?: PartialMessage<Target>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.scrape.v1alpha1.Target";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "discovered_labels", kind: "message", T: LabelSet },
    { no: 2, name: "labels", kind: "message", T: LabelSet },
    { no: 3, name: "last_error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "last_scrape", kind: "message", T: Timestamp },
    { no: 5, name: "last_scrape_duration", kind: "message", T: Duration },
    { no: 6, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "health", kind: "enum", T: proto3.getEnumType(Target_Health) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Target {
    return new Target().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Target {
    return new Target().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Target {
    return new Target().fromJsonString(jsonString, options);
  }

  static equals(a: Target | PlainMessage<Target> | undefined, b: Target | PlainMessage<Target> | undefined): boolean {
    return proto3.util.equals(Target, a, b);
  }
}

/**
 * Health are the possible health values of a target
 *
 * @generated from enum parca.scrape.v1alpha1.Target.Health
 */
export enum Target_Health {
  /**
   * HEALTH_UNKNOWN_UNSPECIFIED unspecified
   *
   * @generated from enum value: HEALTH_UNKNOWN_UNSPECIFIED = 0;
   */
  UNKNOWN_UNSPECIFIED = 0,

  /**
   * HEALTH_GOOD healthy target
   *
   * @generated from enum value: HEALTH_GOOD = 1;
   */
  GOOD = 1,

  /**
   * HEALTH_BAD unhealthy target
   *
   * @generated from enum value: HEALTH_BAD = 2;
   */
  BAD = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Target_Health)
proto3.util.setEnumType(Target_Health, "parca.scrape.v1alpha1.Target.Health", [
  { no: 0, name: "HEALTH_UNKNOWN_UNSPECIFIED" },
  { no: 1, name: "HEALTH_GOOD" },
  { no: 2, name: "HEALTH_BAD" },
]);

