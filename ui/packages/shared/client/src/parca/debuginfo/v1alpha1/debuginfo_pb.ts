// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file parca/debuginfo/v1alpha1/debuginfo.proto (package parca.debuginfo.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * ShouldInitiateUploadRequest is the request for ShouldInitiateUpload.
 *
 * @generated from message parca.debuginfo.v1alpha1.ShouldInitiateUploadRequest
 */
export class ShouldInitiateUploadRequest extends Message<ShouldInitiateUploadRequest> {
  /**
   * The build_id of the debuginfo.
   *
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  /**
   * Hash of the debuginfo to upload.
   *
   * @generated from field: string hash = 2;
   */
  hash = "";

  constructor(data?: PartialMessage<ShouldInitiateUploadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.ShouldInitiateUploadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShouldInitiateUploadRequest {
    return new ShouldInitiateUploadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShouldInitiateUploadRequest {
    return new ShouldInitiateUploadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShouldInitiateUploadRequest {
    return new ShouldInitiateUploadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ShouldInitiateUploadRequest | PlainMessage<ShouldInitiateUploadRequest> | undefined, b: ShouldInitiateUploadRequest | PlainMessage<ShouldInitiateUploadRequest> | undefined): boolean {
    return proto3.util.equals(ShouldInitiateUploadRequest, a, b);
  }
}

/**
 * ShouldInitiateUploadResponse is the response for ShouldInitiateUpload.
 *
 * @generated from message parca.debuginfo.v1alpha1.ShouldInitiateUploadResponse
 */
export class ShouldInitiateUploadResponse extends Message<ShouldInitiateUploadResponse> {
  /**
   * Whether an upload should be initiated or not.
   *
   * @generated from field: bool should_initiate_upload = 1;
   */
  shouldInitiateUpload = false;

  /**
   * Reason for why an upload should be initiated or not.
   *
   * @generated from field: string reason = 2;
   */
  reason = "";

  constructor(data?: PartialMessage<ShouldInitiateUploadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.ShouldInitiateUploadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "should_initiate_upload", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShouldInitiateUploadResponse {
    return new ShouldInitiateUploadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShouldInitiateUploadResponse {
    return new ShouldInitiateUploadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShouldInitiateUploadResponse {
    return new ShouldInitiateUploadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ShouldInitiateUploadResponse | PlainMessage<ShouldInitiateUploadResponse> | undefined, b: ShouldInitiateUploadResponse | PlainMessage<ShouldInitiateUploadResponse> | undefined): boolean {
    return proto3.util.equals(ShouldInitiateUploadResponse, a, b);
  }
}

/**
 * InitiateUploadRequest is the request to initiate an upload.
 *
 * @generated from message parca.debuginfo.v1alpha1.InitiateUploadRequest
 */
export class InitiateUploadRequest extends Message<InitiateUploadRequest> {
  /**
   * The build_id of the debug info to upload.
   *
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  /**
   * The size of the debug info to upload.
   *
   * @generated from field: int64 size = 2;
   */
  size = protoInt64.zero;

  /**
   * Hash of the debuginfo to upload.
   *
   * @generated from field: string hash = 3;
   */
  hash = "";

  constructor(data?: PartialMessage<InitiateUploadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.InitiateUploadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitiateUploadRequest {
    return new InitiateUploadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitiateUploadRequest {
    return new InitiateUploadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitiateUploadRequest {
    return new InitiateUploadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InitiateUploadRequest | PlainMessage<InitiateUploadRequest> | undefined, b: InitiateUploadRequest | PlainMessage<InitiateUploadRequest> | undefined): boolean {
    return proto3.util.equals(InitiateUploadRequest, a, b);
  }
}

/**
 * InitiateUploadResponse is the response to an InitiateUploadRequest.
 *
 * @generated from message parca.debuginfo.v1alpha1.InitiateUploadResponse
 */
export class InitiateUploadResponse extends Message<InitiateUploadResponse> {
  /**
   * UploadInstructions contains the instructions for the client to upload the debuginfo.
   *
   * @generated from field: parca.debuginfo.v1alpha1.UploadInstructions upload_instructions = 1;
   */
  uploadInstructions?: UploadInstructions;

  constructor(data?: PartialMessage<InitiateUploadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.InitiateUploadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "upload_instructions", kind: "message", T: UploadInstructions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitiateUploadResponse {
    return new InitiateUploadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitiateUploadResponse {
    return new InitiateUploadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitiateUploadResponse {
    return new InitiateUploadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InitiateUploadResponse | PlainMessage<InitiateUploadResponse> | undefined, b: InitiateUploadResponse | PlainMessage<InitiateUploadResponse> | undefined): boolean {
    return proto3.util.equals(InitiateUploadResponse, a, b);
  }
}

/**
 * UploadInstructions contains the instructions for the client to upload debuginfo.
 *
 * @generated from message parca.debuginfo.v1alpha1.UploadInstructions
 */
export class UploadInstructions extends Message<UploadInstructions> {
  /**
   * The build ID of the debuginfo to upload.
   *
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  /**
   * The upload_id to use for uploading.
   *
   * @generated from field: string upload_id = 2;
   */
  uploadId = "";

  /**
   * The strategy to use for uploading.
   *
   * @generated from field: parca.debuginfo.v1alpha1.UploadInstructions.UploadStrategy upload_strategy = 3;
   */
  uploadStrategy = UploadInstructions_UploadStrategy.UNSPECIFIED;

  /**
   * The signed url to use for uploading using a PUT request when the upload
   * strategy is SIGNED_STRATEGY_URL.
   *
   * @generated from field: string signed_url = 4;
   */
  signedUrl = "";

  constructor(data?: PartialMessage<UploadInstructions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.UploadInstructions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "upload_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "upload_strategy", kind: "enum", T: proto3.getEnumType(UploadInstructions_UploadStrategy) },
    { no: 4, name: "signed_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadInstructions {
    return new UploadInstructions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadInstructions {
    return new UploadInstructions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadInstructions {
    return new UploadInstructions().fromJsonString(jsonString, options);
  }

  static equals(a: UploadInstructions | PlainMessage<UploadInstructions> | undefined, b: UploadInstructions | PlainMessage<UploadInstructions> | undefined): boolean {
    return proto3.util.equals(UploadInstructions, a, b);
  }
}

/**
 * The strategy to use for uploading.
 *
 * @generated from enum parca.debuginfo.v1alpha1.UploadInstructions.UploadStrategy
 */
export enum UploadInstructions_UploadStrategy {
  /**
   * The upload is not allowed.
   *
   * @generated from enum value: UPLOAD_STRATEGY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The upload is allowed and should be done via the Upload RPC.
   *
   * @generated from enum value: UPLOAD_STRATEGY_GRPC = 1;
   */
  GRPC = 1,

  /**
   * The upload is allowed and should be done via a returned signed URL.
   *
   * @generated from enum value: UPLOAD_STRATEGY_SIGNED_URL = 2;
   */
  SIGNED_URL = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(UploadInstructions_UploadStrategy)
proto3.util.setEnumType(UploadInstructions_UploadStrategy, "parca.debuginfo.v1alpha1.UploadInstructions.UploadStrategy", [
  { no: 0, name: "UPLOAD_STRATEGY_UNSPECIFIED" },
  { no: 1, name: "UPLOAD_STRATEGY_GRPC" },
  { no: 2, name: "UPLOAD_STRATEGY_SIGNED_URL" },
]);

/**
 * MarkUploadFinishedRequest is the request to mark an upload as finished.
 *
 * @generated from message parca.debuginfo.v1alpha1.MarkUploadFinishedRequest
 */
export class MarkUploadFinishedRequest extends Message<MarkUploadFinishedRequest> {
  /**
   * The build_id of the debug info to mark as finished.
   *
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  /**
   * The upload_id of the debug info to mark as finished.
   *
   * @generated from field: string upload_id = 2;
   */
  uploadId = "";

  constructor(data?: PartialMessage<MarkUploadFinishedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.MarkUploadFinishedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "upload_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MarkUploadFinishedRequest {
    return new MarkUploadFinishedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MarkUploadFinishedRequest {
    return new MarkUploadFinishedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MarkUploadFinishedRequest {
    return new MarkUploadFinishedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MarkUploadFinishedRequest | PlainMessage<MarkUploadFinishedRequest> | undefined, b: MarkUploadFinishedRequest | PlainMessage<MarkUploadFinishedRequest> | undefined): boolean {
    return proto3.util.equals(MarkUploadFinishedRequest, a, b);
  }
}

/**
 * MarkUploadFinishedResponse is the response to a MarkUploadFinishedRequest.
 *
 * @generated from message parca.debuginfo.v1alpha1.MarkUploadFinishedResponse
 */
export class MarkUploadFinishedResponse extends Message<MarkUploadFinishedResponse> {
  constructor(data?: PartialMessage<MarkUploadFinishedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.MarkUploadFinishedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MarkUploadFinishedResponse {
    return new MarkUploadFinishedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MarkUploadFinishedResponse {
    return new MarkUploadFinishedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MarkUploadFinishedResponse {
    return new MarkUploadFinishedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MarkUploadFinishedResponse | PlainMessage<MarkUploadFinishedResponse> | undefined, b: MarkUploadFinishedResponse | PlainMessage<MarkUploadFinishedResponse> | undefined): boolean {
    return proto3.util.equals(MarkUploadFinishedResponse, a, b);
  }
}

/**
 * UploadRequest upload debug info
 *
 * @generated from message parca.debuginfo.v1alpha1.UploadRequest
 */
export class UploadRequest extends Message<UploadRequest> {
  /**
   * data contains either the upload info metadata or the debug info
   *
   * @generated from oneof parca.debuginfo.v1alpha1.UploadRequest.data
   */
  data: {
    /**
     * info is the metadata for the debug info
     *
     * @generated from field: parca.debuginfo.v1alpha1.UploadInfo info = 1;
     */
    value: UploadInfo;
    case: "info";
  } | {
    /**
     * chunk_data is the raw bytes of the debug info
     *
     * @generated from field: bytes chunk_data = 2;
     */
    value: Uint8Array;
    case: "chunkData";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<UploadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.UploadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: UploadInfo, oneof: "data" },
    { no: 2, name: "chunk_data", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "data" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadRequest {
    return new UploadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadRequest {
    return new UploadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadRequest {
    return new UploadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadRequest | PlainMessage<UploadRequest> | undefined, b: UploadRequest | PlainMessage<UploadRequest> | undefined): boolean {
    return proto3.util.equals(UploadRequest, a, b);
  }
}

/**
 * UploadInfo contains the build_id and other metadata for the debug data
 *
 * @generated from message parca.debuginfo.v1alpha1.UploadInfo
 */
export class UploadInfo extends Message<UploadInfo> {
  /**
   * build_id is a unique identifier for the debug data
   *
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  /**
   * upload_id is a unique identifier for the upload
   *
   * @generated from field: string upload_id = 2;
   */
  uploadId = "";

  constructor(data?: PartialMessage<UploadInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.UploadInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "upload_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadInfo {
    return new UploadInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadInfo {
    return new UploadInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadInfo {
    return new UploadInfo().fromJsonString(jsonString, options);
  }

  static equals(a: UploadInfo | PlainMessage<UploadInfo> | undefined, b: UploadInfo | PlainMessage<UploadInfo> | undefined): boolean {
    return proto3.util.equals(UploadInfo, a, b);
  }
}

/**
 * UploadResponse returns the build_id and the size of the uploaded debug info
 *
 * @generated from message parca.debuginfo.v1alpha1.UploadResponse
 */
export class UploadResponse extends Message<UploadResponse> {
  /**
   * build_id is a unique identifier for the debug data
   *
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  /**
   * size is the number of bytes of the debug info
   *
   * @generated from field: uint64 size = 2;
   */
  size = protoInt64.zero;

  constructor(data?: PartialMessage<UploadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.UploadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadResponse {
    return new UploadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadResponse {
    return new UploadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadResponse {
    return new UploadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UploadResponse | PlainMessage<UploadResponse> | undefined, b: UploadResponse | PlainMessage<UploadResponse> | undefined): boolean {
    return proto3.util.equals(UploadResponse, a, b);
  }
}

/**
 * Debuginfo contains metadata about a debuginfo file.
 *
 * @generated from message parca.debuginfo.v1alpha1.Debuginfo
 */
export class Debuginfo extends Message<Debuginfo> {
  /**
   * BuildID is the build ID of the debuginfo.
   *
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  /**
   * Source is the source of the debuginfo.
   *
   * @generated from field: parca.debuginfo.v1alpha1.Debuginfo.Source source = 2;
   */
  source = Debuginfo_Source.UNKNOWN_UNSPECIFIED;

  /**
   * DebuginfoUpload is the debuginfo upload metadata.
   *
   * @generated from field: parca.debuginfo.v1alpha1.DebuginfoUpload upload = 3;
   */
  upload?: DebuginfoUpload;

  /**
   * Quality is the quality of the debuginfo. This is set asynchonously by the
   * symbolizer when the debuginfo is actually used.
   *
   * @generated from field: parca.debuginfo.v1alpha1.DebuginfoQuality quality = 4;
   */
  quality?: DebuginfoQuality;

  constructor(data?: PartialMessage<Debuginfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.Debuginfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source", kind: "enum", T: proto3.getEnumType(Debuginfo_Source) },
    { no: 3, name: "upload", kind: "message", T: DebuginfoUpload },
    { no: 4, name: "quality", kind: "message", T: DebuginfoQuality },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Debuginfo {
    return new Debuginfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Debuginfo {
    return new Debuginfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Debuginfo {
    return new Debuginfo().fromJsonString(jsonString, options);
  }

  static equals(a: Debuginfo | PlainMessage<Debuginfo> | undefined, b: Debuginfo | PlainMessage<Debuginfo> | undefined): boolean {
    return proto3.util.equals(Debuginfo, a, b);
  }
}

/**
 * Source is the source of the debuginfo.
 *
 * @generated from enum parca.debuginfo.v1alpha1.Debuginfo.Source
 */
export enum Debuginfo_Source {
  /**
   * To understand when no source is set we have the unknown source.
   *
   * @generated from enum value: SOURCE_UNKNOWN_UNSPECIFIED = 0;
   */
  UNKNOWN_UNSPECIFIED = 0,

  /**
   * The debuginfo was uploaded by a user/agent.
   *
   * @generated from enum value: SOURCE_UPLOAD = 1;
   */
  UPLOAD = 1,

  /**
   * The debuginfo is available from the configured debuginfod server(s).
   *
   * @generated from enum value: SOURCE_DEBUGINFOD = 2;
   */
  DEBUGINFOD = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Debuginfo_Source)
proto3.util.setEnumType(Debuginfo_Source, "parca.debuginfo.v1alpha1.Debuginfo.Source", [
  { no: 0, name: "SOURCE_UNKNOWN_UNSPECIFIED" },
  { no: 1, name: "SOURCE_UPLOAD" },
  { no: 2, name: "SOURCE_DEBUGINFOD" },
]);

/**
 * DebuginfoUpload contains metadata about a debuginfo upload.
 *
 * @generated from message parca.debuginfo.v1alpha1.DebuginfoUpload
 */
export class DebuginfoUpload extends Message<DebuginfoUpload> {
  /**
   * UploadID is the ID of the debuginfo upload.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Hash is the hash of the debuginfo.
   *
   * @generated from field: string hash = 2;
   */
  hash = "";

  /**
   * State is the current state of the debuginfo upload.
   *
   * @generated from field: parca.debuginfo.v1alpha1.DebuginfoUpload.State state = 3;
   */
  state = DebuginfoUpload_State.UNKNOWN_UNSPECIFIED;

  /**
   * StartedAt is the time the debuginfo upload was started.
   *
   * @generated from field: google.protobuf.Timestamp started_at = 4;
   */
  startedAt?: Timestamp;

  /**
   * FinishedAt is the time the debuginfo upload was finished.
   *
   * @generated from field: google.protobuf.Timestamp finished_at = 5;
   */
  finishedAt?: Timestamp;

  constructor(data?: PartialMessage<DebuginfoUpload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.DebuginfoUpload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "state", kind: "enum", T: proto3.getEnumType(DebuginfoUpload_State) },
    { no: 4, name: "started_at", kind: "message", T: Timestamp },
    { no: 5, name: "finished_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebuginfoUpload {
    return new DebuginfoUpload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebuginfoUpload {
    return new DebuginfoUpload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebuginfoUpload {
    return new DebuginfoUpload().fromJsonString(jsonString, options);
  }

  static equals(a: DebuginfoUpload | PlainMessage<DebuginfoUpload> | undefined, b: DebuginfoUpload | PlainMessage<DebuginfoUpload> | undefined): boolean {
    return proto3.util.equals(DebuginfoUpload, a, b);
  }
}

/**
 * The state of the debuginfo upload.
 *
 * @generated from enum parca.debuginfo.v1alpha1.DebuginfoUpload.State
 */
export enum DebuginfoUpload_State {
  /**
   * To understand when no upload state is set we have the unknown state.
   *
   * @generated from enum value: STATE_UNKNOWN_UNSPECIFIED = 0;
   */
  UNKNOWN_UNSPECIFIED = 0,

  /**
   * The debuginfo is currently being uploaded.
   *
   * @generated from enum value: STATE_UPLOADING = 1;
   */
  UPLOADING = 1,

  /**
   * The debuginfo has been uploaded successfully.
   *
   * @generated from enum value: STATE_UPLOADED = 2;
   */
  UPLOADED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(DebuginfoUpload_State)
proto3.util.setEnumType(DebuginfoUpload_State, "parca.debuginfo.v1alpha1.DebuginfoUpload.State", [
  { no: 0, name: "STATE_UNKNOWN_UNSPECIFIED" },
  { no: 1, name: "STATE_UPLOADING" },
  { no: 2, name: "STATE_UPLOADED" },
]);

/**
 * DebuginfoQuality is the quality of the debuginfo.
 *
 * @generated from message parca.debuginfo.v1alpha1.DebuginfoQuality
 */
export class DebuginfoQuality extends Message<DebuginfoQuality> {
  /**
   * The debuginfo file is not a valid ELF file.
   *
   * @generated from field: bool not_valid_elf = 1;
   */
  notValidElf = false;

  /**
   * Whether the debuginfo contains dwarf information.
   *
   * @generated from field: bool has_dwarf = 2;
   */
  hasDwarf = false;

  /**
   * Whether the debuginfo contains Go's pclntab.
   *
   * @generated from field: bool has_go_pclntab = 3;
   */
  hasGoPclntab = false;

  /**
   * Whether the debuginfo contains symtab.
   *
   * @generated from field: bool has_symtab = 4;
   */
  hasSymtab = false;

  /**
   * Whether the debuginfo contains dynsym.
   *
   * @generated from field: bool has_dynsym = 5;
   */
  hasDynsym = false;

  constructor(data?: PartialMessage<DebuginfoQuality>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.DebuginfoQuality";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "not_valid_elf", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "has_dwarf", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "has_go_pclntab", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "has_symtab", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "has_dynsym", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebuginfoQuality {
    return new DebuginfoQuality().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebuginfoQuality {
    return new DebuginfoQuality().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebuginfoQuality {
    return new DebuginfoQuality().fromJsonString(jsonString, options);
  }

  static equals(a: DebuginfoQuality | PlainMessage<DebuginfoQuality> | undefined, b: DebuginfoQuality | PlainMessage<DebuginfoQuality> | undefined): boolean {
    return proto3.util.equals(DebuginfoQuality, a, b);
  }
}

