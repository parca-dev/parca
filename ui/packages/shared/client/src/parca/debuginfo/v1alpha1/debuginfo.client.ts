// @generated by protobuf-ts 2.8.2 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "parca/debuginfo/v1alpha1/debuginfo.proto" (package "parca.debuginfo.v1alpha1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DebugInfoService } from "./debuginfo";
import type { DownloadResponse } from "./debuginfo";
import type { DownloadRequest } from "./debuginfo";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { UploadResponse } from "./debuginfo";
import type { UploadRequest } from "./debuginfo";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ExistsResponse } from "./debuginfo";
import type { ExistsRequest } from "./debuginfo";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * DebugInfoService is a service that allows storage of debug info
 *
 * @generated from protobuf service parca.debuginfo.v1alpha1.DebugInfoService
 */
export interface IDebugInfoServiceClient {
    /**
     * Exists returns true if the given build_id has debug info uploaded for it.
     *
     * @generated from protobuf rpc: Exists(parca.debuginfo.v1alpha1.ExistsRequest) returns (parca.debuginfo.v1alpha1.ExistsResponse);
     */
    exists(input: ExistsRequest, options?: RpcOptions): UnaryCall<ExistsRequest, ExistsResponse>;
    /**
     * Upload ingests debug info for a given build_id
     *
     * @generated from protobuf rpc: Upload(stream parca.debuginfo.v1alpha1.UploadRequest) returns (parca.debuginfo.v1alpha1.UploadResponse);
     */
    upload(options?: RpcOptions): ClientStreamingCall<UploadRequest, UploadResponse>;
    /**
     * Download returns the debug info for a given build_id.
     *
     * @generated from protobuf rpc: Download(parca.debuginfo.v1alpha1.DownloadRequest) returns (stream parca.debuginfo.v1alpha1.DownloadResponse);
     */
    download(input: DownloadRequest, options?: RpcOptions): ServerStreamingCall<DownloadRequest, DownloadResponse>;
}
/**
 * DebugInfoService is a service that allows storage of debug info
 *
 * @generated from protobuf service parca.debuginfo.v1alpha1.DebugInfoService
 */
export class DebugInfoServiceClient implements IDebugInfoServiceClient, ServiceInfo {
    typeName = DebugInfoService.typeName;
    methods = DebugInfoService.methods;
    options = DebugInfoService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Exists returns true if the given build_id has debug info uploaded for it.
     *
     * @generated from protobuf rpc: Exists(parca.debuginfo.v1alpha1.ExistsRequest) returns (parca.debuginfo.v1alpha1.ExistsResponse);
     */
    exists(input: ExistsRequest, options?: RpcOptions): UnaryCall<ExistsRequest, ExistsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExistsRequest, ExistsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Upload ingests debug info for a given build_id
     *
     * @generated from protobuf rpc: Upload(stream parca.debuginfo.v1alpha1.UploadRequest) returns (parca.debuginfo.v1alpha1.UploadResponse);
     */
    upload(options?: RpcOptions): ClientStreamingCall<UploadRequest, UploadResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UploadRequest, UploadResponse>("clientStreaming", this._transport, method, opt);
    }
    /**
     * Download returns the debug info for a given build_id.
     *
     * @generated from protobuf rpc: Download(parca.debuginfo.v1alpha1.DownloadRequest) returns (stream parca.debuginfo.v1alpha1.DownloadResponse);
     */
    download(input: DownloadRequest, options?: RpcOptions): ServerStreamingCall<DownloadRequest, DownloadResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DownloadRequest, DownloadResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
