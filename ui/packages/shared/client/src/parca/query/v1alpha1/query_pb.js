// source: parca/query/v1alpha1/query.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_api_annotations_pb = require('../../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var parca_profilestore_v1alpha1_profilestore_pb = require('../../../parca/profilestore/v1alpha1/profilestore_pb.js');
goog.object.extend(proto, parca_profilestore_v1alpha1_profilestore_pb);
var parca_metastore_v1alpha1_metastore_pb = require('../../../parca/metastore/v1alpha1/metastore_pb.js');
goog.object.extend(proto, parca_metastore_v1alpha1_metastore_pb);
goog.exportSymbol('proto.parca.query.v1alpha1.DiffProfile', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.Flamegraph', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.FlamegraphNode', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.FlamegraphNodeMeta', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.FlamegraphRootNode', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.LabelsRequest', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.LabelsResponse', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.MergeProfile', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.MetricsSample', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.MetricsSeries', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.ProfileDiffSelection', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.ProfileDiffSelection.Mode', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.ProfileDiffSelection.OptionsCase', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.QueryRangeRequest', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.QueryRangeResponse', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.QueryRequest', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.QueryRequest.Mode', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.QueryRequest.OptionsCase', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.QueryRequest.ReportType', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.QueryResponse', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.QueryResponse.ReportCase', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.SeriesRequest', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.SeriesResponse', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.SingleProfile', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.ValueType', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.ValuesRequest', null, global);
goog.exportSymbol('proto.parca.query.v1alpha1.ValuesResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.QueryRangeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parca.query.v1alpha1.QueryRangeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.QueryRangeRequest.displayName = 'proto.parca.query.v1alpha1.QueryRangeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.QueryRangeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.parca.query.v1alpha1.QueryRangeResponse.repeatedFields_, null);
};
goog.inherits(proto.parca.query.v1alpha1.QueryRangeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.QueryRangeResponse.displayName = 'proto.parca.query.v1alpha1.QueryRangeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.MetricsSeries = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.parca.query.v1alpha1.MetricsSeries.repeatedFields_, null);
};
goog.inherits(proto.parca.query.v1alpha1.MetricsSeries, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.MetricsSeries.displayName = 'proto.parca.query.v1alpha1.MetricsSeries';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.MetricsSample = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parca.query.v1alpha1.MetricsSample, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.MetricsSample.displayName = 'proto.parca.query.v1alpha1.MetricsSample';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.MergeProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parca.query.v1alpha1.MergeProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.MergeProfile.displayName = 'proto.parca.query.v1alpha1.MergeProfile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.SingleProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parca.query.v1alpha1.SingleProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.SingleProfile.displayName = 'proto.parca.query.v1alpha1.SingleProfile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.DiffProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parca.query.v1alpha1.DiffProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.DiffProfile.displayName = 'proto.parca.query.v1alpha1.DiffProfile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.ProfileDiffSelection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.parca.query.v1alpha1.ProfileDiffSelection.oneofGroups_);
};
goog.inherits(proto.parca.query.v1alpha1.ProfileDiffSelection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.ProfileDiffSelection.displayName = 'proto.parca.query.v1alpha1.ProfileDiffSelection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.QueryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.parca.query.v1alpha1.QueryRequest.oneofGroups_);
};
goog.inherits(proto.parca.query.v1alpha1.QueryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.QueryRequest.displayName = 'proto.parca.query.v1alpha1.QueryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.Flamegraph = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parca.query.v1alpha1.Flamegraph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.Flamegraph.displayName = 'proto.parca.query.v1alpha1.Flamegraph';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.FlamegraphRootNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.parca.query.v1alpha1.FlamegraphRootNode.repeatedFields_, null);
};
goog.inherits(proto.parca.query.v1alpha1.FlamegraphRootNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.FlamegraphRootNode.displayName = 'proto.parca.query.v1alpha1.FlamegraphRootNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.FlamegraphNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.parca.query.v1alpha1.FlamegraphNode.repeatedFields_, null);
};
goog.inherits(proto.parca.query.v1alpha1.FlamegraphNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.FlamegraphNode.displayName = 'proto.parca.query.v1alpha1.FlamegraphNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.FlamegraphNodeMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parca.query.v1alpha1.FlamegraphNodeMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.FlamegraphNodeMeta.displayName = 'proto.parca.query.v1alpha1.FlamegraphNodeMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.QueryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.parca.query.v1alpha1.QueryResponse.oneofGroups_);
};
goog.inherits(proto.parca.query.v1alpha1.QueryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.QueryResponse.displayName = 'proto.parca.query.v1alpha1.QueryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.SeriesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.parca.query.v1alpha1.SeriesRequest.repeatedFields_, null);
};
goog.inherits(proto.parca.query.v1alpha1.SeriesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.SeriesRequest.displayName = 'proto.parca.query.v1alpha1.SeriesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.SeriesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parca.query.v1alpha1.SeriesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.SeriesResponse.displayName = 'proto.parca.query.v1alpha1.SeriesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.LabelsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.parca.query.v1alpha1.LabelsRequest.repeatedFields_, null);
};
goog.inherits(proto.parca.query.v1alpha1.LabelsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.LabelsRequest.displayName = 'proto.parca.query.v1alpha1.LabelsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.LabelsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.parca.query.v1alpha1.LabelsResponse.repeatedFields_, null);
};
goog.inherits(proto.parca.query.v1alpha1.LabelsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.LabelsResponse.displayName = 'proto.parca.query.v1alpha1.LabelsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.ValuesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.parca.query.v1alpha1.ValuesRequest.repeatedFields_, null);
};
goog.inherits(proto.parca.query.v1alpha1.ValuesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.ValuesRequest.displayName = 'proto.parca.query.v1alpha1.ValuesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.ValuesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.parca.query.v1alpha1.ValuesResponse.repeatedFields_, null);
};
goog.inherits(proto.parca.query.v1alpha1.ValuesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.ValuesResponse.displayName = 'proto.parca.query.v1alpha1.ValuesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.query.v1alpha1.ValueType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parca.query.v1alpha1.ValueType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.query.v1alpha1.ValueType.displayName = 'proto.parca.query.v1alpha1.ValueType';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.QueryRangeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.QueryRangeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.QueryRangeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.QueryRangeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, ""),
    start: (f = msg.getStart()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    end: (f = msg.getEnd()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.QueryRangeRequest}
 */
proto.parca.query.v1alpha1.QueryRangeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.QueryRangeRequest;
  return proto.parca.query.v1alpha1.QueryRangeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.QueryRangeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.QueryRangeRequest}
 */
proto.parca.query.v1alpha1.QueryRangeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.QueryRangeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.QueryRangeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.QueryRangeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.QueryRangeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.parca.query.v1alpha1.QueryRangeRequest.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.parca.query.v1alpha1.QueryRangeRequest} returns this
 */
proto.parca.query.v1alpha1.QueryRangeRequest.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp start = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.parca.query.v1alpha1.QueryRangeRequest.prototype.getStart = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.parca.query.v1alpha1.QueryRangeRequest} returns this
*/
proto.parca.query.v1alpha1.QueryRangeRequest.prototype.setStart = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.QueryRangeRequest} returns this
 */
proto.parca.query.v1alpha1.QueryRangeRequest.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.QueryRangeRequest.prototype.hasStart = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp end = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.parca.query.v1alpha1.QueryRangeRequest.prototype.getEnd = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.parca.query.v1alpha1.QueryRangeRequest} returns this
*/
proto.parca.query.v1alpha1.QueryRangeRequest.prototype.setEnd = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.QueryRangeRequest} returns this
 */
proto.parca.query.v1alpha1.QueryRangeRequest.prototype.clearEnd = function() {
  return this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.QueryRangeRequest.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 limit = 4;
 * @return {number}
 */
proto.parca.query.v1alpha1.QueryRangeRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.parca.query.v1alpha1.QueryRangeRequest} returns this
 */
proto.parca.query.v1alpha1.QueryRangeRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.parca.query.v1alpha1.QueryRangeResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.QueryRangeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.QueryRangeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.QueryRangeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.QueryRangeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    seriesList: jspb.Message.toObjectList(msg.getSeriesList(),
    proto.parca.query.v1alpha1.MetricsSeries.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.QueryRangeResponse}
 */
proto.parca.query.v1alpha1.QueryRangeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.QueryRangeResponse;
  return proto.parca.query.v1alpha1.QueryRangeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.QueryRangeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.QueryRangeResponse}
 */
proto.parca.query.v1alpha1.QueryRangeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.parca.query.v1alpha1.MetricsSeries;
      reader.readMessage(value,proto.parca.query.v1alpha1.MetricsSeries.deserializeBinaryFromReader);
      msg.addSeries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.QueryRangeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.QueryRangeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.QueryRangeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.QueryRangeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.parca.query.v1alpha1.MetricsSeries.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MetricsSeries series = 1;
 * @return {!Array<!proto.parca.query.v1alpha1.MetricsSeries>}
 */
proto.parca.query.v1alpha1.QueryRangeResponse.prototype.getSeriesList = function() {
  return /** @type{!Array<!proto.parca.query.v1alpha1.MetricsSeries>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.parca.query.v1alpha1.MetricsSeries, 1));
};


/**
 * @param {!Array<!proto.parca.query.v1alpha1.MetricsSeries>} value
 * @return {!proto.parca.query.v1alpha1.QueryRangeResponse} returns this
*/
proto.parca.query.v1alpha1.QueryRangeResponse.prototype.setSeriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.parca.query.v1alpha1.MetricsSeries=} opt_value
 * @param {number=} opt_index
 * @return {!proto.parca.query.v1alpha1.MetricsSeries}
 */
proto.parca.query.v1alpha1.QueryRangeResponse.prototype.addSeries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.parca.query.v1alpha1.MetricsSeries, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.parca.query.v1alpha1.QueryRangeResponse} returns this
 */
proto.parca.query.v1alpha1.QueryRangeResponse.prototype.clearSeriesList = function() {
  return this.setSeriesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.parca.query.v1alpha1.MetricsSeries.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.MetricsSeries.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.MetricsSeries.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.MetricsSeries} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.MetricsSeries.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelset: (f = msg.getLabelset()) && parca_profilestore_v1alpha1_profilestore_pb.LabelSet.toObject(includeInstance, f),
    samplesList: jspb.Message.toObjectList(msg.getSamplesList(),
    proto.parca.query.v1alpha1.MetricsSample.toObject, includeInstance),
    periodType: (f = msg.getPeriodType()) && proto.parca.query.v1alpha1.ValueType.toObject(includeInstance, f),
    sampleType: (f = msg.getSampleType()) && proto.parca.query.v1alpha1.ValueType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.MetricsSeries}
 */
proto.parca.query.v1alpha1.MetricsSeries.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.MetricsSeries;
  return proto.parca.query.v1alpha1.MetricsSeries.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.MetricsSeries} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.MetricsSeries}
 */
proto.parca.query.v1alpha1.MetricsSeries.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new parca_profilestore_v1alpha1_profilestore_pb.LabelSet;
      reader.readMessage(value,parca_profilestore_v1alpha1_profilestore_pb.LabelSet.deserializeBinaryFromReader);
      msg.setLabelset(value);
      break;
    case 2:
      var value = new proto.parca.query.v1alpha1.MetricsSample;
      reader.readMessage(value,proto.parca.query.v1alpha1.MetricsSample.deserializeBinaryFromReader);
      msg.addSamples(value);
      break;
    case 3:
      var value = new proto.parca.query.v1alpha1.ValueType;
      reader.readMessage(value,proto.parca.query.v1alpha1.ValueType.deserializeBinaryFromReader);
      msg.setPeriodType(value);
      break;
    case 4:
      var value = new proto.parca.query.v1alpha1.ValueType;
      reader.readMessage(value,proto.parca.query.v1alpha1.ValueType.deserializeBinaryFromReader);
      msg.setSampleType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.MetricsSeries.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.MetricsSeries.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.MetricsSeries} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.MetricsSeries.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelset();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      parca_profilestore_v1alpha1_profilestore_pb.LabelSet.serializeBinaryToWriter
    );
  }
  f = message.getSamplesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.parca.query.v1alpha1.MetricsSample.serializeBinaryToWriter
    );
  }
  f = message.getPeriodType();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.parca.query.v1alpha1.ValueType.serializeBinaryToWriter
    );
  }
  f = message.getSampleType();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.parca.query.v1alpha1.ValueType.serializeBinaryToWriter
    );
  }
};


/**
 * optional parca.profilestore.v1alpha1.LabelSet labelset = 1;
 * @return {?proto.parca.profilestore.v1alpha1.LabelSet}
 */
proto.parca.query.v1alpha1.MetricsSeries.prototype.getLabelset = function() {
  return /** @type{?proto.parca.profilestore.v1alpha1.LabelSet} */ (
    jspb.Message.getWrapperField(this, parca_profilestore_v1alpha1_profilestore_pb.LabelSet, 1));
};


/**
 * @param {?proto.parca.profilestore.v1alpha1.LabelSet|undefined} value
 * @return {!proto.parca.query.v1alpha1.MetricsSeries} returns this
*/
proto.parca.query.v1alpha1.MetricsSeries.prototype.setLabelset = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.MetricsSeries} returns this
 */
proto.parca.query.v1alpha1.MetricsSeries.prototype.clearLabelset = function() {
  return this.setLabelset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.MetricsSeries.prototype.hasLabelset = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated MetricsSample samples = 2;
 * @return {!Array<!proto.parca.query.v1alpha1.MetricsSample>}
 */
proto.parca.query.v1alpha1.MetricsSeries.prototype.getSamplesList = function() {
  return /** @type{!Array<!proto.parca.query.v1alpha1.MetricsSample>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.parca.query.v1alpha1.MetricsSample, 2));
};


/**
 * @param {!Array<!proto.parca.query.v1alpha1.MetricsSample>} value
 * @return {!proto.parca.query.v1alpha1.MetricsSeries} returns this
*/
proto.parca.query.v1alpha1.MetricsSeries.prototype.setSamplesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.parca.query.v1alpha1.MetricsSample=} opt_value
 * @param {number=} opt_index
 * @return {!proto.parca.query.v1alpha1.MetricsSample}
 */
proto.parca.query.v1alpha1.MetricsSeries.prototype.addSamples = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.parca.query.v1alpha1.MetricsSample, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.parca.query.v1alpha1.MetricsSeries} returns this
 */
proto.parca.query.v1alpha1.MetricsSeries.prototype.clearSamplesList = function() {
  return this.setSamplesList([]);
};


/**
 * optional ValueType period_type = 3;
 * @return {?proto.parca.query.v1alpha1.ValueType}
 */
proto.parca.query.v1alpha1.MetricsSeries.prototype.getPeriodType = function() {
  return /** @type{?proto.parca.query.v1alpha1.ValueType} */ (
    jspb.Message.getWrapperField(this, proto.parca.query.v1alpha1.ValueType, 3));
};


/**
 * @param {?proto.parca.query.v1alpha1.ValueType|undefined} value
 * @return {!proto.parca.query.v1alpha1.MetricsSeries} returns this
*/
proto.parca.query.v1alpha1.MetricsSeries.prototype.setPeriodType = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.MetricsSeries} returns this
 */
proto.parca.query.v1alpha1.MetricsSeries.prototype.clearPeriodType = function() {
  return this.setPeriodType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.MetricsSeries.prototype.hasPeriodType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ValueType sample_type = 4;
 * @return {?proto.parca.query.v1alpha1.ValueType}
 */
proto.parca.query.v1alpha1.MetricsSeries.prototype.getSampleType = function() {
  return /** @type{?proto.parca.query.v1alpha1.ValueType} */ (
    jspb.Message.getWrapperField(this, proto.parca.query.v1alpha1.ValueType, 4));
};


/**
 * @param {?proto.parca.query.v1alpha1.ValueType|undefined} value
 * @return {!proto.parca.query.v1alpha1.MetricsSeries} returns this
*/
proto.parca.query.v1alpha1.MetricsSeries.prototype.setSampleType = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.MetricsSeries} returns this
 */
proto.parca.query.v1alpha1.MetricsSeries.prototype.clearSampleType = function() {
  return this.setSampleType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.MetricsSeries.prototype.hasSampleType = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.MetricsSample.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.MetricsSample.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.MetricsSample} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.MetricsSample.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.MetricsSample}
 */
proto.parca.query.v1alpha1.MetricsSample.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.MetricsSample;
  return proto.parca.query.v1alpha1.MetricsSample.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.MetricsSample} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.MetricsSample}
 */
proto.parca.query.v1alpha1.MetricsSample.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.MetricsSample.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.MetricsSample.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.MetricsSample} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.MetricsSample.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.parca.query.v1alpha1.MetricsSample.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.parca.query.v1alpha1.MetricsSample} returns this
*/
proto.parca.query.v1alpha1.MetricsSample.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.MetricsSample} returns this
 */
proto.parca.query.v1alpha1.MetricsSample.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.MetricsSample.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 value = 2;
 * @return {number}
 */
proto.parca.query.v1alpha1.MetricsSample.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.parca.query.v1alpha1.MetricsSample} returns this
 */
proto.parca.query.v1alpha1.MetricsSample.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.MergeProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.MergeProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.MergeProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.MergeProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, ""),
    start: (f = msg.getStart()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    end: (f = msg.getEnd()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.MergeProfile}
 */
proto.parca.query.v1alpha1.MergeProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.MergeProfile;
  return proto.parca.query.v1alpha1.MergeProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.MergeProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.MergeProfile}
 */
proto.parca.query.v1alpha1.MergeProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.MergeProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.MergeProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.MergeProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.MergeProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.parca.query.v1alpha1.MergeProfile.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.parca.query.v1alpha1.MergeProfile} returns this
 */
proto.parca.query.v1alpha1.MergeProfile.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp start = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.parca.query.v1alpha1.MergeProfile.prototype.getStart = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.parca.query.v1alpha1.MergeProfile} returns this
*/
proto.parca.query.v1alpha1.MergeProfile.prototype.setStart = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.MergeProfile} returns this
 */
proto.parca.query.v1alpha1.MergeProfile.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.MergeProfile.prototype.hasStart = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp end = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.parca.query.v1alpha1.MergeProfile.prototype.getEnd = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.parca.query.v1alpha1.MergeProfile} returns this
*/
proto.parca.query.v1alpha1.MergeProfile.prototype.setEnd = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.MergeProfile} returns this
 */
proto.parca.query.v1alpha1.MergeProfile.prototype.clearEnd = function() {
  return this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.MergeProfile.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.SingleProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.SingleProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.SingleProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.SingleProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    query: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.SingleProfile}
 */
proto.parca.query.v1alpha1.SingleProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.SingleProfile;
  return proto.parca.query.v1alpha1.SingleProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.SingleProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.SingleProfile}
 */
proto.parca.query.v1alpha1.SingleProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.SingleProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.SingleProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.SingleProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.SingleProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp time = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.parca.query.v1alpha1.SingleProfile.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.parca.query.v1alpha1.SingleProfile} returns this
*/
proto.parca.query.v1alpha1.SingleProfile.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.SingleProfile} returns this
 */
proto.parca.query.v1alpha1.SingleProfile.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.SingleProfile.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.parca.query.v1alpha1.SingleProfile.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.parca.query.v1alpha1.SingleProfile} returns this
 */
proto.parca.query.v1alpha1.SingleProfile.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.DiffProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.DiffProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.DiffProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.DiffProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    a: (f = msg.getA()) && proto.parca.query.v1alpha1.ProfileDiffSelection.toObject(includeInstance, f),
    b: (f = msg.getB()) && proto.parca.query.v1alpha1.ProfileDiffSelection.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.DiffProfile}
 */
proto.parca.query.v1alpha1.DiffProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.DiffProfile;
  return proto.parca.query.v1alpha1.DiffProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.DiffProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.DiffProfile}
 */
proto.parca.query.v1alpha1.DiffProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.parca.query.v1alpha1.ProfileDiffSelection;
      reader.readMessage(value,proto.parca.query.v1alpha1.ProfileDiffSelection.deserializeBinaryFromReader);
      msg.setA(value);
      break;
    case 2:
      var value = new proto.parca.query.v1alpha1.ProfileDiffSelection;
      reader.readMessage(value,proto.parca.query.v1alpha1.ProfileDiffSelection.deserializeBinaryFromReader);
      msg.setB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.DiffProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.DiffProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.DiffProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.DiffProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getA();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.parca.query.v1alpha1.ProfileDiffSelection.serializeBinaryToWriter
    );
  }
  f = message.getB();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.parca.query.v1alpha1.ProfileDiffSelection.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProfileDiffSelection a = 1;
 * @return {?proto.parca.query.v1alpha1.ProfileDiffSelection}
 */
proto.parca.query.v1alpha1.DiffProfile.prototype.getA = function() {
  return /** @type{?proto.parca.query.v1alpha1.ProfileDiffSelection} */ (
    jspb.Message.getWrapperField(this, proto.parca.query.v1alpha1.ProfileDiffSelection, 1));
};


/**
 * @param {?proto.parca.query.v1alpha1.ProfileDiffSelection|undefined} value
 * @return {!proto.parca.query.v1alpha1.DiffProfile} returns this
*/
proto.parca.query.v1alpha1.DiffProfile.prototype.setA = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.DiffProfile} returns this
 */
proto.parca.query.v1alpha1.DiffProfile.prototype.clearA = function() {
  return this.setA(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.DiffProfile.prototype.hasA = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProfileDiffSelection b = 2;
 * @return {?proto.parca.query.v1alpha1.ProfileDiffSelection}
 */
proto.parca.query.v1alpha1.DiffProfile.prototype.getB = function() {
  return /** @type{?proto.parca.query.v1alpha1.ProfileDiffSelection} */ (
    jspb.Message.getWrapperField(this, proto.parca.query.v1alpha1.ProfileDiffSelection, 2));
};


/**
 * @param {?proto.parca.query.v1alpha1.ProfileDiffSelection|undefined} value
 * @return {!proto.parca.query.v1alpha1.DiffProfile} returns this
*/
proto.parca.query.v1alpha1.DiffProfile.prototype.setB = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.DiffProfile} returns this
 */
proto.parca.query.v1alpha1.DiffProfile.prototype.clearB = function() {
  return this.setB(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.DiffProfile.prototype.hasB = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.parca.query.v1alpha1.ProfileDiffSelection.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.parca.query.v1alpha1.ProfileDiffSelection.OptionsCase = {
  OPTIONS_NOT_SET: 0,
  MERGE: 2,
  SINGLE: 3
};

/**
 * @return {proto.parca.query.v1alpha1.ProfileDiffSelection.OptionsCase}
 */
proto.parca.query.v1alpha1.ProfileDiffSelection.prototype.getOptionsCase = function() {
  return /** @type {proto.parca.query.v1alpha1.ProfileDiffSelection.OptionsCase} */(jspb.Message.computeOneofCase(this, proto.parca.query.v1alpha1.ProfileDiffSelection.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.ProfileDiffSelection.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.ProfileDiffSelection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.ProfileDiffSelection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.ProfileDiffSelection.toObject = function(includeInstance, msg) {
  var f, obj = {
    mode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    merge: (f = msg.getMerge()) && proto.parca.query.v1alpha1.MergeProfile.toObject(includeInstance, f),
    single: (f = msg.getSingle()) && proto.parca.query.v1alpha1.SingleProfile.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.ProfileDiffSelection}
 */
proto.parca.query.v1alpha1.ProfileDiffSelection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.ProfileDiffSelection;
  return proto.parca.query.v1alpha1.ProfileDiffSelection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.ProfileDiffSelection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.ProfileDiffSelection}
 */
proto.parca.query.v1alpha1.ProfileDiffSelection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.parca.query.v1alpha1.ProfileDiffSelection.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 2:
      var value = new proto.parca.query.v1alpha1.MergeProfile;
      reader.readMessage(value,proto.parca.query.v1alpha1.MergeProfile.deserializeBinaryFromReader);
      msg.setMerge(value);
      break;
    case 3:
      var value = new proto.parca.query.v1alpha1.SingleProfile;
      reader.readMessage(value,proto.parca.query.v1alpha1.SingleProfile.deserializeBinaryFromReader);
      msg.setSingle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.ProfileDiffSelection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.ProfileDiffSelection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.ProfileDiffSelection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.ProfileDiffSelection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMerge();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.parca.query.v1alpha1.MergeProfile.serializeBinaryToWriter
    );
  }
  f = message.getSingle();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.parca.query.v1alpha1.SingleProfile.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.parca.query.v1alpha1.ProfileDiffSelection.Mode = {
  MODE_SINGLE_UNSPECIFIED: 0,
  MODE_MERGE: 1
};

/**
 * optional Mode mode = 1;
 * @return {!proto.parca.query.v1alpha1.ProfileDiffSelection.Mode}
 */
proto.parca.query.v1alpha1.ProfileDiffSelection.prototype.getMode = function() {
  return /** @type {!proto.parca.query.v1alpha1.ProfileDiffSelection.Mode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.parca.query.v1alpha1.ProfileDiffSelection.Mode} value
 * @return {!proto.parca.query.v1alpha1.ProfileDiffSelection} returns this
 */
proto.parca.query.v1alpha1.ProfileDiffSelection.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional MergeProfile merge = 2;
 * @return {?proto.parca.query.v1alpha1.MergeProfile}
 */
proto.parca.query.v1alpha1.ProfileDiffSelection.prototype.getMerge = function() {
  return /** @type{?proto.parca.query.v1alpha1.MergeProfile} */ (
    jspb.Message.getWrapperField(this, proto.parca.query.v1alpha1.MergeProfile, 2));
};


/**
 * @param {?proto.parca.query.v1alpha1.MergeProfile|undefined} value
 * @return {!proto.parca.query.v1alpha1.ProfileDiffSelection} returns this
*/
proto.parca.query.v1alpha1.ProfileDiffSelection.prototype.setMerge = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.parca.query.v1alpha1.ProfileDiffSelection.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.ProfileDiffSelection} returns this
 */
proto.parca.query.v1alpha1.ProfileDiffSelection.prototype.clearMerge = function() {
  return this.setMerge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.ProfileDiffSelection.prototype.hasMerge = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SingleProfile single = 3;
 * @return {?proto.parca.query.v1alpha1.SingleProfile}
 */
proto.parca.query.v1alpha1.ProfileDiffSelection.prototype.getSingle = function() {
  return /** @type{?proto.parca.query.v1alpha1.SingleProfile} */ (
    jspb.Message.getWrapperField(this, proto.parca.query.v1alpha1.SingleProfile, 3));
};


/**
 * @param {?proto.parca.query.v1alpha1.SingleProfile|undefined} value
 * @return {!proto.parca.query.v1alpha1.ProfileDiffSelection} returns this
*/
proto.parca.query.v1alpha1.ProfileDiffSelection.prototype.setSingle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.parca.query.v1alpha1.ProfileDiffSelection.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.ProfileDiffSelection} returns this
 */
proto.parca.query.v1alpha1.ProfileDiffSelection.prototype.clearSingle = function() {
  return this.setSingle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.ProfileDiffSelection.prototype.hasSingle = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.parca.query.v1alpha1.QueryRequest.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.parca.query.v1alpha1.QueryRequest.OptionsCase = {
  OPTIONS_NOT_SET: 0,
  DIFF: 2,
  MERGE: 3,
  SINGLE: 4
};

/**
 * @return {proto.parca.query.v1alpha1.QueryRequest.OptionsCase}
 */
proto.parca.query.v1alpha1.QueryRequest.prototype.getOptionsCase = function() {
  return /** @type {proto.parca.query.v1alpha1.QueryRequest.OptionsCase} */(jspb.Message.computeOneofCase(this, proto.parca.query.v1alpha1.QueryRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.QueryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.QueryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.QueryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.QueryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    mode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    diff: (f = msg.getDiff()) && proto.parca.query.v1alpha1.DiffProfile.toObject(includeInstance, f),
    merge: (f = msg.getMerge()) && proto.parca.query.v1alpha1.MergeProfile.toObject(includeInstance, f),
    single: (f = msg.getSingle()) && proto.parca.query.v1alpha1.SingleProfile.toObject(includeInstance, f),
    reportType: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.QueryRequest}
 */
proto.parca.query.v1alpha1.QueryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.QueryRequest;
  return proto.parca.query.v1alpha1.QueryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.QueryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.QueryRequest}
 */
proto.parca.query.v1alpha1.QueryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.parca.query.v1alpha1.QueryRequest.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 2:
      var value = new proto.parca.query.v1alpha1.DiffProfile;
      reader.readMessage(value,proto.parca.query.v1alpha1.DiffProfile.deserializeBinaryFromReader);
      msg.setDiff(value);
      break;
    case 3:
      var value = new proto.parca.query.v1alpha1.MergeProfile;
      reader.readMessage(value,proto.parca.query.v1alpha1.MergeProfile.deserializeBinaryFromReader);
      msg.setMerge(value);
      break;
    case 4:
      var value = new proto.parca.query.v1alpha1.SingleProfile;
      reader.readMessage(value,proto.parca.query.v1alpha1.SingleProfile.deserializeBinaryFromReader);
      msg.setSingle(value);
      break;
    case 5:
      var value = /** @type {!proto.parca.query.v1alpha1.QueryRequest.ReportType} */ (reader.readEnum());
      msg.setReportType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.QueryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.QueryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.QueryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.QueryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDiff();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.parca.query.v1alpha1.DiffProfile.serializeBinaryToWriter
    );
  }
  f = message.getMerge();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.parca.query.v1alpha1.MergeProfile.serializeBinaryToWriter
    );
  }
  f = message.getSingle();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.parca.query.v1alpha1.SingleProfile.serializeBinaryToWriter
    );
  }
  f = message.getReportType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.parca.query.v1alpha1.QueryRequest.Mode = {
  MODE_SINGLE_UNSPECIFIED: 0,
  MODE_DIFF: 1,
  MODE_MERGE: 2
};

/**
 * @enum {number}
 */
proto.parca.query.v1alpha1.QueryRequest.ReportType = {
  REPORT_TYPE_FLAMEGRAPH_UNSPECIFIED: 0,
  REPORT_TYPE_PPROF_UNSPECIFIED: 1
};

/**
 * optional Mode mode = 1;
 * @return {!proto.parca.query.v1alpha1.QueryRequest.Mode}
 */
proto.parca.query.v1alpha1.QueryRequest.prototype.getMode = function() {
  return /** @type {!proto.parca.query.v1alpha1.QueryRequest.Mode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.parca.query.v1alpha1.QueryRequest.Mode} value
 * @return {!proto.parca.query.v1alpha1.QueryRequest} returns this
 */
proto.parca.query.v1alpha1.QueryRequest.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional DiffProfile diff = 2;
 * @return {?proto.parca.query.v1alpha1.DiffProfile}
 */
proto.parca.query.v1alpha1.QueryRequest.prototype.getDiff = function() {
  return /** @type{?proto.parca.query.v1alpha1.DiffProfile} */ (
    jspb.Message.getWrapperField(this, proto.parca.query.v1alpha1.DiffProfile, 2));
};


/**
 * @param {?proto.parca.query.v1alpha1.DiffProfile|undefined} value
 * @return {!proto.parca.query.v1alpha1.QueryRequest} returns this
*/
proto.parca.query.v1alpha1.QueryRequest.prototype.setDiff = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.parca.query.v1alpha1.QueryRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.QueryRequest} returns this
 */
proto.parca.query.v1alpha1.QueryRequest.prototype.clearDiff = function() {
  return this.setDiff(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.QueryRequest.prototype.hasDiff = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MergeProfile merge = 3;
 * @return {?proto.parca.query.v1alpha1.MergeProfile}
 */
proto.parca.query.v1alpha1.QueryRequest.prototype.getMerge = function() {
  return /** @type{?proto.parca.query.v1alpha1.MergeProfile} */ (
    jspb.Message.getWrapperField(this, proto.parca.query.v1alpha1.MergeProfile, 3));
};


/**
 * @param {?proto.parca.query.v1alpha1.MergeProfile|undefined} value
 * @return {!proto.parca.query.v1alpha1.QueryRequest} returns this
*/
proto.parca.query.v1alpha1.QueryRequest.prototype.setMerge = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.parca.query.v1alpha1.QueryRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.QueryRequest} returns this
 */
proto.parca.query.v1alpha1.QueryRequest.prototype.clearMerge = function() {
  return this.setMerge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.QueryRequest.prototype.hasMerge = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SingleProfile single = 4;
 * @return {?proto.parca.query.v1alpha1.SingleProfile}
 */
proto.parca.query.v1alpha1.QueryRequest.prototype.getSingle = function() {
  return /** @type{?proto.parca.query.v1alpha1.SingleProfile} */ (
    jspb.Message.getWrapperField(this, proto.parca.query.v1alpha1.SingleProfile, 4));
};


/**
 * @param {?proto.parca.query.v1alpha1.SingleProfile|undefined} value
 * @return {!proto.parca.query.v1alpha1.QueryRequest} returns this
*/
proto.parca.query.v1alpha1.QueryRequest.prototype.setSingle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.parca.query.v1alpha1.QueryRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.QueryRequest} returns this
 */
proto.parca.query.v1alpha1.QueryRequest.prototype.clearSingle = function() {
  return this.setSingle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.QueryRequest.prototype.hasSingle = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ReportType report_type = 5;
 * @return {!proto.parca.query.v1alpha1.QueryRequest.ReportType}
 */
proto.parca.query.v1alpha1.QueryRequest.prototype.getReportType = function() {
  return /** @type {!proto.parca.query.v1alpha1.QueryRequest.ReportType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.parca.query.v1alpha1.QueryRequest.ReportType} value
 * @return {!proto.parca.query.v1alpha1.QueryRequest} returns this
 */
proto.parca.query.v1alpha1.QueryRequest.prototype.setReportType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.Flamegraph.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.Flamegraph.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.Flamegraph} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.Flamegraph.toObject = function(includeInstance, msg) {
  var f, obj = {
    root: (f = msg.getRoot()) && proto.parca.query.v1alpha1.FlamegraphRootNode.toObject(includeInstance, f),
    total: jspb.Message.getFieldWithDefault(msg, 2, 0),
    unit: jspb.Message.getFieldWithDefault(msg, 3, ""),
    height: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.Flamegraph}
 */
proto.parca.query.v1alpha1.Flamegraph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.Flamegraph;
  return proto.parca.query.v1alpha1.Flamegraph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.Flamegraph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.Flamegraph}
 */
proto.parca.query.v1alpha1.Flamegraph.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.parca.query.v1alpha1.FlamegraphRootNode;
      reader.readMessage(value,proto.parca.query.v1alpha1.FlamegraphRootNode.deserializeBinaryFromReader);
      msg.setRoot(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.Flamegraph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.Flamegraph.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.Flamegraph} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.Flamegraph.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoot();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.parca.query.v1alpha1.FlamegraphRootNode.serializeBinaryToWriter
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUnit();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional FlamegraphRootNode root = 1;
 * @return {?proto.parca.query.v1alpha1.FlamegraphRootNode}
 */
proto.parca.query.v1alpha1.Flamegraph.prototype.getRoot = function() {
  return /** @type{?proto.parca.query.v1alpha1.FlamegraphRootNode} */ (
    jspb.Message.getWrapperField(this, proto.parca.query.v1alpha1.FlamegraphRootNode, 1));
};


/**
 * @param {?proto.parca.query.v1alpha1.FlamegraphRootNode|undefined} value
 * @return {!proto.parca.query.v1alpha1.Flamegraph} returns this
*/
proto.parca.query.v1alpha1.Flamegraph.prototype.setRoot = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.Flamegraph} returns this
 */
proto.parca.query.v1alpha1.Flamegraph.prototype.clearRoot = function() {
  return this.setRoot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.Flamegraph.prototype.hasRoot = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 total = 2;
 * @return {number}
 */
proto.parca.query.v1alpha1.Flamegraph.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.parca.query.v1alpha1.Flamegraph} returns this
 */
proto.parca.query.v1alpha1.Flamegraph.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string unit = 3;
 * @return {string}
 */
proto.parca.query.v1alpha1.Flamegraph.prototype.getUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.parca.query.v1alpha1.Flamegraph} returns this
 */
proto.parca.query.v1alpha1.Flamegraph.prototype.setUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 height = 4;
 * @return {number}
 */
proto.parca.query.v1alpha1.Flamegraph.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.parca.query.v1alpha1.Flamegraph} returns this
 */
proto.parca.query.v1alpha1.Flamegraph.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.parca.query.v1alpha1.FlamegraphRootNode.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.FlamegraphRootNode.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.FlamegraphRootNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.FlamegraphRootNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.FlamegraphRootNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    cumulative: jspb.Message.getFieldWithDefault(msg, 1, 0),
    diff: jspb.Message.getFieldWithDefault(msg, 2, 0),
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.parca.query.v1alpha1.FlamegraphNode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.FlamegraphRootNode}
 */
proto.parca.query.v1alpha1.FlamegraphRootNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.FlamegraphRootNode;
  return proto.parca.query.v1alpha1.FlamegraphRootNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.FlamegraphRootNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.FlamegraphRootNode}
 */
proto.parca.query.v1alpha1.FlamegraphRootNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCumulative(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDiff(value);
      break;
    case 3:
      var value = new proto.parca.query.v1alpha1.FlamegraphNode;
      reader.readMessage(value,proto.parca.query.v1alpha1.FlamegraphNode.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.FlamegraphRootNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.FlamegraphRootNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.FlamegraphRootNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.FlamegraphRootNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCumulative();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDiff();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.parca.query.v1alpha1.FlamegraphNode.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 cumulative = 1;
 * @return {number}
 */
proto.parca.query.v1alpha1.FlamegraphRootNode.prototype.getCumulative = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.parca.query.v1alpha1.FlamegraphRootNode} returns this
 */
proto.parca.query.v1alpha1.FlamegraphRootNode.prototype.setCumulative = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 diff = 2;
 * @return {number}
 */
proto.parca.query.v1alpha1.FlamegraphRootNode.prototype.getDiff = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.parca.query.v1alpha1.FlamegraphRootNode} returns this
 */
proto.parca.query.v1alpha1.FlamegraphRootNode.prototype.setDiff = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated FlamegraphNode children = 3;
 * @return {!Array<!proto.parca.query.v1alpha1.FlamegraphNode>}
 */
proto.parca.query.v1alpha1.FlamegraphRootNode.prototype.getChildrenList = function() {
  return /** @type{!Array<!proto.parca.query.v1alpha1.FlamegraphNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.parca.query.v1alpha1.FlamegraphNode, 3));
};


/**
 * @param {!Array<!proto.parca.query.v1alpha1.FlamegraphNode>} value
 * @return {!proto.parca.query.v1alpha1.FlamegraphRootNode} returns this
*/
proto.parca.query.v1alpha1.FlamegraphRootNode.prototype.setChildrenList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.parca.query.v1alpha1.FlamegraphNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.parca.query.v1alpha1.FlamegraphNode}
 */
proto.parca.query.v1alpha1.FlamegraphRootNode.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.parca.query.v1alpha1.FlamegraphNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.parca.query.v1alpha1.FlamegraphRootNode} returns this
 */
proto.parca.query.v1alpha1.FlamegraphRootNode.prototype.clearChildrenList = function() {
  return this.setChildrenList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.parca.query.v1alpha1.FlamegraphNode.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.FlamegraphNode.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.FlamegraphNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.FlamegraphNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.FlamegraphNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && proto.parca.query.v1alpha1.FlamegraphNodeMeta.toObject(includeInstance, f),
    cumulative: jspb.Message.getFieldWithDefault(msg, 2, 0),
    diff: jspb.Message.getFieldWithDefault(msg, 3, 0),
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.parca.query.v1alpha1.FlamegraphNode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.FlamegraphNode}
 */
proto.parca.query.v1alpha1.FlamegraphNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.FlamegraphNode;
  return proto.parca.query.v1alpha1.FlamegraphNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.FlamegraphNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.FlamegraphNode}
 */
proto.parca.query.v1alpha1.FlamegraphNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.parca.query.v1alpha1.FlamegraphNodeMeta;
      reader.readMessage(value,proto.parca.query.v1alpha1.FlamegraphNodeMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCumulative(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDiff(value);
      break;
    case 4:
      var value = new proto.parca.query.v1alpha1.FlamegraphNode;
      reader.readMessage(value,proto.parca.query.v1alpha1.FlamegraphNode.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.FlamegraphNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.FlamegraphNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.FlamegraphNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.FlamegraphNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.parca.query.v1alpha1.FlamegraphNodeMeta.serializeBinaryToWriter
    );
  }
  f = message.getCumulative();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getDiff();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.parca.query.v1alpha1.FlamegraphNode.serializeBinaryToWriter
    );
  }
};


/**
 * optional FlamegraphNodeMeta meta = 1;
 * @return {?proto.parca.query.v1alpha1.FlamegraphNodeMeta}
 */
proto.parca.query.v1alpha1.FlamegraphNode.prototype.getMeta = function() {
  return /** @type{?proto.parca.query.v1alpha1.FlamegraphNodeMeta} */ (
    jspb.Message.getWrapperField(this, proto.parca.query.v1alpha1.FlamegraphNodeMeta, 1));
};


/**
 * @param {?proto.parca.query.v1alpha1.FlamegraphNodeMeta|undefined} value
 * @return {!proto.parca.query.v1alpha1.FlamegraphNode} returns this
*/
proto.parca.query.v1alpha1.FlamegraphNode.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.FlamegraphNode} returns this
 */
proto.parca.query.v1alpha1.FlamegraphNode.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.FlamegraphNode.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 cumulative = 2;
 * @return {number}
 */
proto.parca.query.v1alpha1.FlamegraphNode.prototype.getCumulative = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.parca.query.v1alpha1.FlamegraphNode} returns this
 */
proto.parca.query.v1alpha1.FlamegraphNode.prototype.setCumulative = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 diff = 3;
 * @return {number}
 */
proto.parca.query.v1alpha1.FlamegraphNode.prototype.getDiff = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.parca.query.v1alpha1.FlamegraphNode} returns this
 */
proto.parca.query.v1alpha1.FlamegraphNode.prototype.setDiff = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated FlamegraphNode children = 4;
 * @return {!Array<!proto.parca.query.v1alpha1.FlamegraphNode>}
 */
proto.parca.query.v1alpha1.FlamegraphNode.prototype.getChildrenList = function() {
  return /** @type{!Array<!proto.parca.query.v1alpha1.FlamegraphNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.parca.query.v1alpha1.FlamegraphNode, 4));
};


/**
 * @param {!Array<!proto.parca.query.v1alpha1.FlamegraphNode>} value
 * @return {!proto.parca.query.v1alpha1.FlamegraphNode} returns this
*/
proto.parca.query.v1alpha1.FlamegraphNode.prototype.setChildrenList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.parca.query.v1alpha1.FlamegraphNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.parca.query.v1alpha1.FlamegraphNode}
 */
proto.parca.query.v1alpha1.FlamegraphNode.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.parca.query.v1alpha1.FlamegraphNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.parca.query.v1alpha1.FlamegraphNode} returns this
 */
proto.parca.query.v1alpha1.FlamegraphNode.prototype.clearChildrenList = function() {
  return this.setChildrenList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.FlamegraphNodeMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.FlamegraphNodeMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.FlamegraphNodeMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.FlamegraphNodeMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && parca_metastore_v1alpha1_metastore_pb.Location.toObject(includeInstance, f),
    mapping: (f = msg.getMapping()) && parca_metastore_v1alpha1_metastore_pb.Mapping.toObject(includeInstance, f),
    pb_function: (f = msg.getFunction()) && parca_metastore_v1alpha1_metastore_pb.Function.toObject(includeInstance, f),
    line: (f = msg.getLine()) && parca_metastore_v1alpha1_metastore_pb.Line.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.FlamegraphNodeMeta}
 */
proto.parca.query.v1alpha1.FlamegraphNodeMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.FlamegraphNodeMeta;
  return proto.parca.query.v1alpha1.FlamegraphNodeMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.FlamegraphNodeMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.FlamegraphNodeMeta}
 */
proto.parca.query.v1alpha1.FlamegraphNodeMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new parca_metastore_v1alpha1_metastore_pb.Location;
      reader.readMessage(value,parca_metastore_v1alpha1_metastore_pb.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 2:
      var value = new parca_metastore_v1alpha1_metastore_pb.Mapping;
      reader.readMessage(value,parca_metastore_v1alpha1_metastore_pb.Mapping.deserializeBinaryFromReader);
      msg.setMapping(value);
      break;
    case 3:
      var value = new parca_metastore_v1alpha1_metastore_pb.Function;
      reader.readMessage(value,parca_metastore_v1alpha1_metastore_pb.Function.deserializeBinaryFromReader);
      msg.setFunction(value);
      break;
    case 4:
      var value = new parca_metastore_v1alpha1_metastore_pb.Line;
      reader.readMessage(value,parca_metastore_v1alpha1_metastore_pb.Line.deserializeBinaryFromReader);
      msg.setLine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.FlamegraphNodeMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.FlamegraphNodeMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.FlamegraphNodeMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.FlamegraphNodeMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      parca_metastore_v1alpha1_metastore_pb.Location.serializeBinaryToWriter
    );
  }
  f = message.getMapping();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      parca_metastore_v1alpha1_metastore_pb.Mapping.serializeBinaryToWriter
    );
  }
  f = message.getFunction();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      parca_metastore_v1alpha1_metastore_pb.Function.serializeBinaryToWriter
    );
  }
  f = message.getLine();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      parca_metastore_v1alpha1_metastore_pb.Line.serializeBinaryToWriter
    );
  }
};


/**
 * optional parca.metastore.v1alpha1.Location location = 1;
 * @return {?proto.parca.metastore.v1alpha1.Location}
 */
proto.parca.query.v1alpha1.FlamegraphNodeMeta.prototype.getLocation = function() {
  return /** @type{?proto.parca.metastore.v1alpha1.Location} */ (
    jspb.Message.getWrapperField(this, parca_metastore_v1alpha1_metastore_pb.Location, 1));
};


/**
 * @param {?proto.parca.metastore.v1alpha1.Location|undefined} value
 * @return {!proto.parca.query.v1alpha1.FlamegraphNodeMeta} returns this
*/
proto.parca.query.v1alpha1.FlamegraphNodeMeta.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.FlamegraphNodeMeta} returns this
 */
proto.parca.query.v1alpha1.FlamegraphNodeMeta.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.FlamegraphNodeMeta.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional parca.metastore.v1alpha1.Mapping mapping = 2;
 * @return {?proto.parca.metastore.v1alpha1.Mapping}
 */
proto.parca.query.v1alpha1.FlamegraphNodeMeta.prototype.getMapping = function() {
  return /** @type{?proto.parca.metastore.v1alpha1.Mapping} */ (
    jspb.Message.getWrapperField(this, parca_metastore_v1alpha1_metastore_pb.Mapping, 2));
};


/**
 * @param {?proto.parca.metastore.v1alpha1.Mapping|undefined} value
 * @return {!proto.parca.query.v1alpha1.FlamegraphNodeMeta} returns this
*/
proto.parca.query.v1alpha1.FlamegraphNodeMeta.prototype.setMapping = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.FlamegraphNodeMeta} returns this
 */
proto.parca.query.v1alpha1.FlamegraphNodeMeta.prototype.clearMapping = function() {
  return this.setMapping(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.FlamegraphNodeMeta.prototype.hasMapping = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional parca.metastore.v1alpha1.Function function = 3;
 * @return {?proto.parca.metastore.v1alpha1.Function}
 */
proto.parca.query.v1alpha1.FlamegraphNodeMeta.prototype.getFunction = function() {
  return /** @type{?proto.parca.metastore.v1alpha1.Function} */ (
    jspb.Message.getWrapperField(this, parca_metastore_v1alpha1_metastore_pb.Function, 3));
};


/**
 * @param {?proto.parca.metastore.v1alpha1.Function|undefined} value
 * @return {!proto.parca.query.v1alpha1.FlamegraphNodeMeta} returns this
*/
proto.parca.query.v1alpha1.FlamegraphNodeMeta.prototype.setFunction = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.FlamegraphNodeMeta} returns this
 */
proto.parca.query.v1alpha1.FlamegraphNodeMeta.prototype.clearFunction = function() {
  return this.setFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.FlamegraphNodeMeta.prototype.hasFunction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional parca.metastore.v1alpha1.Line line = 4;
 * @return {?proto.parca.metastore.v1alpha1.Line}
 */
proto.parca.query.v1alpha1.FlamegraphNodeMeta.prototype.getLine = function() {
  return /** @type{?proto.parca.metastore.v1alpha1.Line} */ (
    jspb.Message.getWrapperField(this, parca_metastore_v1alpha1_metastore_pb.Line, 4));
};


/**
 * @param {?proto.parca.metastore.v1alpha1.Line|undefined} value
 * @return {!proto.parca.query.v1alpha1.FlamegraphNodeMeta} returns this
*/
proto.parca.query.v1alpha1.FlamegraphNodeMeta.prototype.setLine = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.FlamegraphNodeMeta} returns this
 */
proto.parca.query.v1alpha1.FlamegraphNodeMeta.prototype.clearLine = function() {
  return this.setLine(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.FlamegraphNodeMeta.prototype.hasLine = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.parca.query.v1alpha1.QueryResponse.oneofGroups_ = [[5,6]];

/**
 * @enum {number}
 */
proto.parca.query.v1alpha1.QueryResponse.ReportCase = {
  REPORT_NOT_SET: 0,
  FLAMEGRAPH: 5,
  PPROF: 6
};

/**
 * @return {proto.parca.query.v1alpha1.QueryResponse.ReportCase}
 */
proto.parca.query.v1alpha1.QueryResponse.prototype.getReportCase = function() {
  return /** @type {proto.parca.query.v1alpha1.QueryResponse.ReportCase} */(jspb.Message.computeOneofCase(this, proto.parca.query.v1alpha1.QueryResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.QueryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.QueryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.QueryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.QueryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    flamegraph: (f = msg.getFlamegraph()) && proto.parca.query.v1alpha1.Flamegraph.toObject(includeInstance, f),
    pprof: msg.getPprof_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.QueryResponse}
 */
proto.parca.query.v1alpha1.QueryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.QueryResponse;
  return proto.parca.query.v1alpha1.QueryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.QueryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.QueryResponse}
 */
proto.parca.query.v1alpha1.QueryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = new proto.parca.query.v1alpha1.Flamegraph;
      reader.readMessage(value,proto.parca.query.v1alpha1.Flamegraph.deserializeBinaryFromReader);
      msg.setFlamegraph(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPprof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.QueryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.QueryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.QueryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.QueryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlamegraph();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.parca.query.v1alpha1.Flamegraph.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional Flamegraph flamegraph = 5;
 * @return {?proto.parca.query.v1alpha1.Flamegraph}
 */
proto.parca.query.v1alpha1.QueryResponse.prototype.getFlamegraph = function() {
  return /** @type{?proto.parca.query.v1alpha1.Flamegraph} */ (
    jspb.Message.getWrapperField(this, proto.parca.query.v1alpha1.Flamegraph, 5));
};


/**
 * @param {?proto.parca.query.v1alpha1.Flamegraph|undefined} value
 * @return {!proto.parca.query.v1alpha1.QueryResponse} returns this
*/
proto.parca.query.v1alpha1.QueryResponse.prototype.setFlamegraph = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.parca.query.v1alpha1.QueryResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.QueryResponse} returns this
 */
proto.parca.query.v1alpha1.QueryResponse.prototype.clearFlamegraph = function() {
  return this.setFlamegraph(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.QueryResponse.prototype.hasFlamegraph = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes pprof = 6;
 * @return {!(string|Uint8Array)}
 */
proto.parca.query.v1alpha1.QueryResponse.prototype.getPprof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes pprof = 6;
 * This is a type-conversion wrapper around `getPprof()`
 * @return {string}
 */
proto.parca.query.v1alpha1.QueryResponse.prototype.getPprof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPprof()));
};


/**
 * optional bytes pprof = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPprof()`
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.QueryResponse.prototype.getPprof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPprof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.parca.query.v1alpha1.QueryResponse} returns this
 */
proto.parca.query.v1alpha1.QueryResponse.prototype.setPprof = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.parca.query.v1alpha1.QueryResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.parca.query.v1alpha1.QueryResponse} returns this
 */
proto.parca.query.v1alpha1.QueryResponse.prototype.clearPprof = function() {
  return jspb.Message.setOneofField(this, 6, proto.parca.query.v1alpha1.QueryResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.QueryResponse.prototype.hasPprof = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.parca.query.v1alpha1.SeriesRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.SeriesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.SeriesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.SeriesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.SeriesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    start: (f = msg.getStart()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    end: (f = msg.getEnd()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.SeriesRequest}
 */
proto.parca.query.v1alpha1.SeriesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.SeriesRequest;
  return proto.parca.query.v1alpha1.SeriesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.SeriesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.SeriesRequest}
 */
proto.parca.query.v1alpha1.SeriesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addMatch(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.SeriesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.SeriesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.SeriesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.SeriesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string match = 1;
 * @return {!Array<string>}
 */
proto.parca.query.v1alpha1.SeriesRequest.prototype.getMatchList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.parca.query.v1alpha1.SeriesRequest} returns this
 */
proto.parca.query.v1alpha1.SeriesRequest.prototype.setMatchList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.parca.query.v1alpha1.SeriesRequest} returns this
 */
proto.parca.query.v1alpha1.SeriesRequest.prototype.addMatch = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.parca.query.v1alpha1.SeriesRequest} returns this
 */
proto.parca.query.v1alpha1.SeriesRequest.prototype.clearMatchList = function() {
  return this.setMatchList([]);
};


/**
 * optional google.protobuf.Timestamp start = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.parca.query.v1alpha1.SeriesRequest.prototype.getStart = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.parca.query.v1alpha1.SeriesRequest} returns this
*/
proto.parca.query.v1alpha1.SeriesRequest.prototype.setStart = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.SeriesRequest} returns this
 */
proto.parca.query.v1alpha1.SeriesRequest.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.SeriesRequest.prototype.hasStart = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp end = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.parca.query.v1alpha1.SeriesRequest.prototype.getEnd = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.parca.query.v1alpha1.SeriesRequest} returns this
*/
proto.parca.query.v1alpha1.SeriesRequest.prototype.setEnd = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.SeriesRequest} returns this
 */
proto.parca.query.v1alpha1.SeriesRequest.prototype.clearEnd = function() {
  return this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.SeriesRequest.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.SeriesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.SeriesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.SeriesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.SeriesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.SeriesResponse}
 */
proto.parca.query.v1alpha1.SeriesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.SeriesResponse;
  return proto.parca.query.v1alpha1.SeriesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.SeriesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.SeriesResponse}
 */
proto.parca.query.v1alpha1.SeriesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.SeriesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.SeriesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.SeriesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.SeriesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.parca.query.v1alpha1.LabelsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.LabelsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.LabelsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.LabelsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.LabelsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    start: (f = msg.getStart()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    end: (f = msg.getEnd()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.LabelsRequest}
 */
proto.parca.query.v1alpha1.LabelsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.LabelsRequest;
  return proto.parca.query.v1alpha1.LabelsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.LabelsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.LabelsRequest}
 */
proto.parca.query.v1alpha1.LabelsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addMatch(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.LabelsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.LabelsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.LabelsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.LabelsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string match = 1;
 * @return {!Array<string>}
 */
proto.parca.query.v1alpha1.LabelsRequest.prototype.getMatchList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.parca.query.v1alpha1.LabelsRequest} returns this
 */
proto.parca.query.v1alpha1.LabelsRequest.prototype.setMatchList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.parca.query.v1alpha1.LabelsRequest} returns this
 */
proto.parca.query.v1alpha1.LabelsRequest.prototype.addMatch = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.parca.query.v1alpha1.LabelsRequest} returns this
 */
proto.parca.query.v1alpha1.LabelsRequest.prototype.clearMatchList = function() {
  return this.setMatchList([]);
};


/**
 * optional google.protobuf.Timestamp start = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.parca.query.v1alpha1.LabelsRequest.prototype.getStart = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.parca.query.v1alpha1.LabelsRequest} returns this
*/
proto.parca.query.v1alpha1.LabelsRequest.prototype.setStart = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.LabelsRequest} returns this
 */
proto.parca.query.v1alpha1.LabelsRequest.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.LabelsRequest.prototype.hasStart = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp end = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.parca.query.v1alpha1.LabelsRequest.prototype.getEnd = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.parca.query.v1alpha1.LabelsRequest} returns this
*/
proto.parca.query.v1alpha1.LabelsRequest.prototype.setEnd = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.LabelsRequest} returns this
 */
proto.parca.query.v1alpha1.LabelsRequest.prototype.clearEnd = function() {
  return this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.LabelsRequest.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.parca.query.v1alpha1.LabelsResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.LabelsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.LabelsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.LabelsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.LabelsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelNamesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    warningsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.LabelsResponse}
 */
proto.parca.query.v1alpha1.LabelsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.LabelsResponse;
  return proto.parca.query.v1alpha1.LabelsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.LabelsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.LabelsResponse}
 */
proto.parca.query.v1alpha1.LabelsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addLabelNames(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addWarnings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.LabelsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.LabelsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.LabelsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.LabelsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getWarningsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string label_names = 1;
 * @return {!Array<string>}
 */
proto.parca.query.v1alpha1.LabelsResponse.prototype.getLabelNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.parca.query.v1alpha1.LabelsResponse} returns this
 */
proto.parca.query.v1alpha1.LabelsResponse.prototype.setLabelNamesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.parca.query.v1alpha1.LabelsResponse} returns this
 */
proto.parca.query.v1alpha1.LabelsResponse.prototype.addLabelNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.parca.query.v1alpha1.LabelsResponse} returns this
 */
proto.parca.query.v1alpha1.LabelsResponse.prototype.clearLabelNamesList = function() {
  return this.setLabelNamesList([]);
};


/**
 * repeated string warnings = 2;
 * @return {!Array<string>}
 */
proto.parca.query.v1alpha1.LabelsResponse.prototype.getWarningsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.parca.query.v1alpha1.LabelsResponse} returns this
 */
proto.parca.query.v1alpha1.LabelsResponse.prototype.setWarningsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.parca.query.v1alpha1.LabelsResponse} returns this
 */
proto.parca.query.v1alpha1.LabelsResponse.prototype.addWarnings = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.parca.query.v1alpha1.LabelsResponse} returns this
 */
proto.parca.query.v1alpha1.LabelsResponse.prototype.clearWarningsList = function() {
  return this.setWarningsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.parca.query.v1alpha1.ValuesRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.ValuesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.ValuesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.ValuesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.ValuesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    matchList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    start: (f = msg.getStart()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    end: (f = msg.getEnd()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.ValuesRequest}
 */
proto.parca.query.v1alpha1.ValuesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.ValuesRequest;
  return proto.parca.query.v1alpha1.ValuesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.ValuesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.ValuesRequest}
 */
proto.parca.query.v1alpha1.ValuesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabelName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addMatch(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.ValuesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.ValuesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.ValuesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.ValuesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMatchList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string label_name = 1;
 * @return {string}
 */
proto.parca.query.v1alpha1.ValuesRequest.prototype.getLabelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.parca.query.v1alpha1.ValuesRequest} returns this
 */
proto.parca.query.v1alpha1.ValuesRequest.prototype.setLabelName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string match = 2;
 * @return {!Array<string>}
 */
proto.parca.query.v1alpha1.ValuesRequest.prototype.getMatchList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.parca.query.v1alpha1.ValuesRequest} returns this
 */
proto.parca.query.v1alpha1.ValuesRequest.prototype.setMatchList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.parca.query.v1alpha1.ValuesRequest} returns this
 */
proto.parca.query.v1alpha1.ValuesRequest.prototype.addMatch = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.parca.query.v1alpha1.ValuesRequest} returns this
 */
proto.parca.query.v1alpha1.ValuesRequest.prototype.clearMatchList = function() {
  return this.setMatchList([]);
};


/**
 * optional google.protobuf.Timestamp start = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.parca.query.v1alpha1.ValuesRequest.prototype.getStart = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.parca.query.v1alpha1.ValuesRequest} returns this
*/
proto.parca.query.v1alpha1.ValuesRequest.prototype.setStart = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.ValuesRequest} returns this
 */
proto.parca.query.v1alpha1.ValuesRequest.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.ValuesRequest.prototype.hasStart = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp end = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.parca.query.v1alpha1.ValuesRequest.prototype.getEnd = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.parca.query.v1alpha1.ValuesRequest} returns this
*/
proto.parca.query.v1alpha1.ValuesRequest.prototype.setEnd = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.query.v1alpha1.ValuesRequest} returns this
 */
proto.parca.query.v1alpha1.ValuesRequest.prototype.clearEnd = function() {
  return this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.query.v1alpha1.ValuesRequest.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.parca.query.v1alpha1.ValuesResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.ValuesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.ValuesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.ValuesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.ValuesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelValuesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    warningsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.ValuesResponse}
 */
proto.parca.query.v1alpha1.ValuesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.ValuesResponse;
  return proto.parca.query.v1alpha1.ValuesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.ValuesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.ValuesResponse}
 */
proto.parca.query.v1alpha1.ValuesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addLabelValues(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addWarnings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.ValuesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.ValuesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.ValuesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.ValuesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getWarningsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string label_values = 1;
 * @return {!Array<string>}
 */
proto.parca.query.v1alpha1.ValuesResponse.prototype.getLabelValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.parca.query.v1alpha1.ValuesResponse} returns this
 */
proto.parca.query.v1alpha1.ValuesResponse.prototype.setLabelValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.parca.query.v1alpha1.ValuesResponse} returns this
 */
proto.parca.query.v1alpha1.ValuesResponse.prototype.addLabelValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.parca.query.v1alpha1.ValuesResponse} returns this
 */
proto.parca.query.v1alpha1.ValuesResponse.prototype.clearLabelValuesList = function() {
  return this.setLabelValuesList([]);
};


/**
 * repeated string warnings = 2;
 * @return {!Array<string>}
 */
proto.parca.query.v1alpha1.ValuesResponse.prototype.getWarningsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.parca.query.v1alpha1.ValuesResponse} returns this
 */
proto.parca.query.v1alpha1.ValuesResponse.prototype.setWarningsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.parca.query.v1alpha1.ValuesResponse} returns this
 */
proto.parca.query.v1alpha1.ValuesResponse.prototype.addWarnings = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.parca.query.v1alpha1.ValuesResponse} returns this
 */
proto.parca.query.v1alpha1.ValuesResponse.prototype.clearWarningsList = function() {
  return this.setWarningsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.query.v1alpha1.ValueType.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.query.v1alpha1.ValueType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.query.v1alpha1.ValueType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.ValueType.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    unit: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.query.v1alpha1.ValueType}
 */
proto.parca.query.v1alpha1.ValueType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.query.v1alpha1.ValueType;
  return proto.parca.query.v1alpha1.ValueType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.query.v1alpha1.ValueType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.query.v1alpha1.ValueType}
 */
proto.parca.query.v1alpha1.ValueType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.query.v1alpha1.ValueType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.query.v1alpha1.ValueType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.query.v1alpha1.ValueType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.query.v1alpha1.ValueType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUnit();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.parca.query.v1alpha1.ValueType.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.parca.query.v1alpha1.ValueType} returns this
 */
proto.parca.query.v1alpha1.ValueType.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string unit = 2;
 * @return {string}
 */
proto.parca.query.v1alpha1.ValueType.prototype.getUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.parca.query.v1alpha1.ValueType} returns this
 */
proto.parca.query.v1alpha1.ValueType.prototype.setUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.parca.query.v1alpha1);
