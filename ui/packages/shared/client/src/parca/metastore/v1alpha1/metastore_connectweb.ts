// @generated by protoc-gen-connect-web v0.8.4 with parameter "target=ts"
// @generated from file parca/metastore/v1alpha1/metastore.proto (package parca.metastore.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateLocationLinesRequest, CreateLocationLinesResponse, FunctionsRequest, FunctionsResponse, GetOrCreateFunctionsRequest, GetOrCreateFunctionsResponse, GetOrCreateLocationsRequest, GetOrCreateLocationsResponse, GetOrCreateMappingsRequest, GetOrCreateMappingsResponse, GetOrCreateStacktracesRequest, GetOrCreateStacktracesResponse, LocationsRequest, LocationsResponse, MappingsRequest, MappingsResponse, StacktracesRequest, StacktracesResponse, UnsymbolizedLocationsRequest, UnsymbolizedLocationsResponse } from "./metastore_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * MetastoreService
 *
 * @generated from service parca.metastore.v1alpha1.MetastoreService
 */
export const MetastoreService = {
  typeName: "parca.metastore.v1alpha1.MetastoreService",
  methods: {
    /**
     * GetOrCreateMappings checks if the mappings in the request are already
     * known and returns the known mapping (including its ID) if so. If a mapping
     * does not already exist, it is written to the backing metastore.
     *
     * @generated from rpc parca.metastore.v1alpha1.MetastoreService.GetOrCreateMappings
     */
    getOrCreateMappings: {
      name: "GetOrCreateMappings",
      I: GetOrCreateMappingsRequest,
      O: GetOrCreateMappingsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetOrCreateFunctions checks if the functions in the request are already
     * known and returns the known function (including its ID) if so. If a
     * function does not already exist, it is written to the backing metastore.
     *
     * @generated from rpc parca.metastore.v1alpha1.MetastoreService.GetOrCreateFunctions
     */
    getOrCreateFunctions: {
      name: "GetOrCreateFunctions",
      I: GetOrCreateFunctionsRequest,
      O: GetOrCreateFunctionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetOrCreateLocations checks if the locations in the request are already
     * known and returns the known location (including its ID) if so. If a
     * location does not already exist, it is written to the backing metastore.
     *
     * @generated from rpc parca.metastore.v1alpha1.MetastoreService.GetOrCreateLocations
     */
    getOrCreateLocations: {
      name: "GetOrCreateLocations",
      I: GetOrCreateLocationsRequest,
      O: GetOrCreateLocationsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetOrCreateStacktraces checks if the stacktraces in the request are
     * already known and returns the known stacktrace (including its ID) if so.
     * If a stacktrace does not already exist, it is written to the backing
     * metastore.
     *
     * @generated from rpc parca.metastore.v1alpha1.MetastoreService.GetOrCreateStacktraces
     */
    getOrCreateStacktraces: {
      name: "GetOrCreateStacktraces",
      I: GetOrCreateStacktracesRequest,
      O: GetOrCreateStacktracesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UnsymbolizedLocations returns locations that can be symbolized but haven't
     * been asynchronously symbolized yet.
     *
     * @generated from rpc parca.metastore.v1alpha1.MetastoreService.UnsymbolizedLocations
     */
    unsymbolizedLocations: {
      name: "UnsymbolizedLocations",
      I: UnsymbolizedLocationsRequest,
      O: UnsymbolizedLocationsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateLocationLines creates the location lines contained in the provided
     * locations.
     *
     * @generated from rpc parca.metastore.v1alpha1.MetastoreService.CreateLocationLines
     */
    createLocationLines: {
      name: "CreateLocationLines",
      I: CreateLocationLinesRequest,
      O: CreateLocationLinesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Locations retrieves locations.
     *
     * @generated from rpc parca.metastore.v1alpha1.MetastoreService.Locations
     */
    locations: {
      name: "Locations",
      I: LocationsRequest,
      O: LocationsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Functions retrieves functions.
     *
     * @generated from rpc parca.metastore.v1alpha1.MetastoreService.Functions
     */
    functions: {
      name: "Functions",
      I: FunctionsRequest,
      O: FunctionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Mappings retrieves mappings.
     *
     * @generated from rpc parca.metastore.v1alpha1.MetastoreService.Mappings
     */
    mappings: {
      name: "Mappings",
      I: MappingsRequest,
      O: MappingsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Stacktraces retrieves mappings.
     *
     * @generated from rpc parca.metastore.v1alpha1.MetastoreService.Stacktraces
     */
    stacktraces: {
      name: "Stacktraces",
      I: StacktracesRequest,
      O: StacktracesResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

