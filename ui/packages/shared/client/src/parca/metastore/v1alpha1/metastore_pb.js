// source: parca/metastore/v1alpha1/metastore.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.parca.metastore.v1alpha1.Function', null, global);
goog.exportSymbol('proto.parca.metastore.v1alpha1.Line', null, global);
goog.exportSymbol('proto.parca.metastore.v1alpha1.Location', null, global);
goog.exportSymbol('proto.parca.metastore.v1alpha1.LocationLines', null, global);
goog.exportSymbol('proto.parca.metastore.v1alpha1.Mapping', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.metastore.v1alpha1.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parca.metastore.v1alpha1.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.metastore.v1alpha1.Location.displayName = 'proto.parca.metastore.v1alpha1.Location';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.metastore.v1alpha1.LocationLines = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.parca.metastore.v1alpha1.LocationLines.repeatedFields_, null);
};
goog.inherits(proto.parca.metastore.v1alpha1.LocationLines, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.metastore.v1alpha1.LocationLines.displayName = 'proto.parca.metastore.v1alpha1.LocationLines';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.metastore.v1alpha1.Line = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parca.metastore.v1alpha1.Line, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.metastore.v1alpha1.Line.displayName = 'proto.parca.metastore.v1alpha1.Line';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.metastore.v1alpha1.Function = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parca.metastore.v1alpha1.Function, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.metastore.v1alpha1.Function.displayName = 'proto.parca.metastore.v1alpha1.Function';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.metastore.v1alpha1.Mapping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parca.metastore.v1alpha1.Mapping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.metastore.v1alpha1.Mapping.displayName = 'proto.parca.metastore.v1alpha1.Mapping';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.metastore.v1alpha1.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.metastore.v1alpha1.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.metastore.v1alpha1.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.metastore.v1alpha1.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    address: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mappingId: msg.getMappingId_asB64(),
    isFolded: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.metastore.v1alpha1.Location}
 */
proto.parca.metastore.v1alpha1.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.metastore.v1alpha1.Location;
  return proto.parca.metastore.v1alpha1.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.metastore.v1alpha1.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.metastore.v1alpha1.Location}
 */
proto.parca.metastore.v1alpha1.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAddress(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMappingId(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFolded(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.metastore.v1alpha1.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.metastore.v1alpha1.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.metastore.v1alpha1.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.metastore.v1alpha1.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMappingId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getIsFolded();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.parca.metastore.v1alpha1.Location.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.parca.metastore.v1alpha1.Location.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.parca.metastore.v1alpha1.Location.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.parca.metastore.v1alpha1.Location} returns this
 */
proto.parca.metastore.v1alpha1.Location.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 address = 2;
 * @return {number}
 */
proto.parca.metastore.v1alpha1.Location.prototype.getAddress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.parca.metastore.v1alpha1.Location} returns this
 */
proto.parca.metastore.v1alpha1.Location.prototype.setAddress = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes mapping_id = 4;
 * @return {!(string|Uint8Array)}
 */
proto.parca.metastore.v1alpha1.Location.prototype.getMappingId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes mapping_id = 4;
 * This is a type-conversion wrapper around `getMappingId()`
 * @return {string}
 */
proto.parca.metastore.v1alpha1.Location.prototype.getMappingId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMappingId()));
};


/**
 * optional bytes mapping_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMappingId()`
 * @return {!Uint8Array}
 */
proto.parca.metastore.v1alpha1.Location.prototype.getMappingId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMappingId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.parca.metastore.v1alpha1.Location} returns this
 */
proto.parca.metastore.v1alpha1.Location.prototype.setMappingId = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bool is_folded = 5;
 * @return {boolean}
 */
proto.parca.metastore.v1alpha1.Location.prototype.getIsFolded = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.parca.metastore.v1alpha1.Location} returns this
 */
proto.parca.metastore.v1alpha1.Location.prototype.setIsFolded = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.parca.metastore.v1alpha1.LocationLines.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.metastore.v1alpha1.LocationLines.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.metastore.v1alpha1.LocationLines.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.metastore.v1alpha1.LocationLines} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.metastore.v1alpha1.LocationLines.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    linesList: jspb.Message.toObjectList(msg.getLinesList(),
    proto.parca.metastore.v1alpha1.Line.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.metastore.v1alpha1.LocationLines}
 */
proto.parca.metastore.v1alpha1.LocationLines.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.metastore.v1alpha1.LocationLines;
  return proto.parca.metastore.v1alpha1.LocationLines.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.metastore.v1alpha1.LocationLines} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.metastore.v1alpha1.LocationLines}
 */
proto.parca.metastore.v1alpha1.LocationLines.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.parca.metastore.v1alpha1.Line;
      reader.readMessage(value,proto.parca.metastore.v1alpha1.Line.deserializeBinaryFromReader);
      msg.addLines(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.metastore.v1alpha1.LocationLines.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.metastore.v1alpha1.LocationLines.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.metastore.v1alpha1.LocationLines} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.metastore.v1alpha1.LocationLines.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLinesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.parca.metastore.v1alpha1.Line.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.parca.metastore.v1alpha1.LocationLines.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.parca.metastore.v1alpha1.LocationLines.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.parca.metastore.v1alpha1.LocationLines.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.parca.metastore.v1alpha1.LocationLines} returns this
 */
proto.parca.metastore.v1alpha1.LocationLines.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated Line lines = 2;
 * @return {!Array<!proto.parca.metastore.v1alpha1.Line>}
 */
proto.parca.metastore.v1alpha1.LocationLines.prototype.getLinesList = function() {
  return /** @type{!Array<!proto.parca.metastore.v1alpha1.Line>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.parca.metastore.v1alpha1.Line, 2));
};


/**
 * @param {!Array<!proto.parca.metastore.v1alpha1.Line>} value
 * @return {!proto.parca.metastore.v1alpha1.LocationLines} returns this
*/
proto.parca.metastore.v1alpha1.LocationLines.prototype.setLinesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.parca.metastore.v1alpha1.Line=} opt_value
 * @param {number=} opt_index
 * @return {!proto.parca.metastore.v1alpha1.Line}
 */
proto.parca.metastore.v1alpha1.LocationLines.prototype.addLines = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.parca.metastore.v1alpha1.Line, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.parca.metastore.v1alpha1.LocationLines} returns this
 */
proto.parca.metastore.v1alpha1.LocationLines.prototype.clearLinesList = function() {
  return this.setLinesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.metastore.v1alpha1.Line.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.metastore.v1alpha1.Line.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.metastore.v1alpha1.Line} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.metastore.v1alpha1.Line.toObject = function(includeInstance, msg) {
  var f, obj = {
    functionId: msg.getFunctionId_asB64(),
    line: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.metastore.v1alpha1.Line}
 */
proto.parca.metastore.v1alpha1.Line.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.metastore.v1alpha1.Line;
  return proto.parca.metastore.v1alpha1.Line.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.metastore.v1alpha1.Line} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.metastore.v1alpha1.Line}
 */
proto.parca.metastore.v1alpha1.Line.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFunctionId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.metastore.v1alpha1.Line.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.metastore.v1alpha1.Line.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.metastore.v1alpha1.Line} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.metastore.v1alpha1.Line.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunctionId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLine();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes function_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.parca.metastore.v1alpha1.Line.prototype.getFunctionId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes function_id = 1;
 * This is a type-conversion wrapper around `getFunctionId()`
 * @return {string}
 */
proto.parca.metastore.v1alpha1.Line.prototype.getFunctionId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFunctionId()));
};


/**
 * optional bytes function_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFunctionId()`
 * @return {!Uint8Array}
 */
proto.parca.metastore.v1alpha1.Line.prototype.getFunctionId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFunctionId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.parca.metastore.v1alpha1.Line} returns this
 */
proto.parca.metastore.v1alpha1.Line.prototype.setFunctionId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 line = 2;
 * @return {number}
 */
proto.parca.metastore.v1alpha1.Line.prototype.getLine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.parca.metastore.v1alpha1.Line} returns this
 */
proto.parca.metastore.v1alpha1.Line.prototype.setLine = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.metastore.v1alpha1.Function.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.metastore.v1alpha1.Function.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.metastore.v1alpha1.Function} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.metastore.v1alpha1.Function.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    startLine: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    systemName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    filename: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.metastore.v1alpha1.Function}
 */
proto.parca.metastore.v1alpha1.Function.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.metastore.v1alpha1.Function;
  return proto.parca.metastore.v1alpha1.Function.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.metastore.v1alpha1.Function} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.metastore.v1alpha1.Function}
 */
proto.parca.metastore.v1alpha1.Function.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartLine(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.metastore.v1alpha1.Function.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.metastore.v1alpha1.Function.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.metastore.v1alpha1.Function} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.metastore.v1alpha1.Function.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStartLine();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSystemName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.parca.metastore.v1alpha1.Function.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.parca.metastore.v1alpha1.Function.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.parca.metastore.v1alpha1.Function.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.parca.metastore.v1alpha1.Function} returns this
 */
proto.parca.metastore.v1alpha1.Function.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 start_line = 2;
 * @return {number}
 */
proto.parca.metastore.v1alpha1.Function.prototype.getStartLine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.parca.metastore.v1alpha1.Function} returns this
 */
proto.parca.metastore.v1alpha1.Function.prototype.setStartLine = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.parca.metastore.v1alpha1.Function.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.parca.metastore.v1alpha1.Function} returns this
 */
proto.parca.metastore.v1alpha1.Function.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string system_name = 4;
 * @return {string}
 */
proto.parca.metastore.v1alpha1.Function.prototype.getSystemName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.parca.metastore.v1alpha1.Function} returns this
 */
proto.parca.metastore.v1alpha1.Function.prototype.setSystemName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string filename = 5;
 * @return {string}
 */
proto.parca.metastore.v1alpha1.Function.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.parca.metastore.v1alpha1.Function} returns this
 */
proto.parca.metastore.v1alpha1.Function.prototype.setFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.metastore.v1alpha1.Mapping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.metastore.v1alpha1.Mapping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.metastore.v1alpha1.Mapping.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    start: jspb.Message.getFieldWithDefault(msg, 2, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 4, 0),
    file: jspb.Message.getFieldWithDefault(msg, 5, ""),
    buildId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    hasFunctions: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    hasFilenames: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    hasLineNumbers: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    hasInlineFrames: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.metastore.v1alpha1.Mapping}
 */
proto.parca.metastore.v1alpha1.Mapping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.metastore.v1alpha1.Mapping;
  return proto.parca.metastore.v1alpha1.Mapping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.metastore.v1alpha1.Mapping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.metastore.v1alpha1.Mapping}
 */
proto.parca.metastore.v1alpha1.Mapping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStart(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffset(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFile(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuildId(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasFunctions(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasFilenames(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasLineNumbers(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasInlineFrames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.metastore.v1alpha1.Mapping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.metastore.v1alpha1.Mapping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.metastore.v1alpha1.Mapping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStart();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getFile();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getBuildId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getHasFunctions();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getHasFilenames();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getHasLineNumbers();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getHasInlineFrames();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.parca.metastore.v1alpha1.Mapping} returns this
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 start = 2;
 * @return {number}
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.parca.metastore.v1alpha1.Mapping} returns this
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.setStart = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 limit = 3;
 * @return {number}
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.parca.metastore.v1alpha1.Mapping} returns this
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 offset = 4;
 * @return {number}
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.parca.metastore.v1alpha1.Mapping} returns this
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string file = 5;
 * @return {string}
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.getFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.parca.metastore.v1alpha1.Mapping} returns this
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.setFile = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string build_id = 6;
 * @return {string}
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.getBuildId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.parca.metastore.v1alpha1.Mapping} returns this
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.setBuildId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool has_functions = 7;
 * @return {boolean}
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.getHasFunctions = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.parca.metastore.v1alpha1.Mapping} returns this
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.setHasFunctions = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool has_filenames = 8;
 * @return {boolean}
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.getHasFilenames = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.parca.metastore.v1alpha1.Mapping} returns this
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.setHasFilenames = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool has_line_numbers = 9;
 * @return {boolean}
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.getHasLineNumbers = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.parca.metastore.v1alpha1.Mapping} returns this
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.setHasLineNumbers = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool has_inline_frames = 10;
 * @return {boolean}
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.getHasInlineFrames = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.parca.metastore.v1alpha1.Mapping} returns this
 */
proto.parca.metastore.v1alpha1.Mapping.prototype.setHasInlineFrames = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


goog.object.extend(exports, proto.parca.metastore.v1alpha1);
