// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file parca/profilestore/v1alpha1/profilestore.proto (package parca.profilestore.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * WriteRawRequest writes a pprof profile for a given tenant
 *
 * @generated from message parca.profilestore.v1alpha1.WriteRawRequest
 */
export class WriteRawRequest extends Message<WriteRawRequest> {
  /**
   * tenant is the given tenant to store the pprof profile under
   *
   * @generated from field: string tenant = 1 [deprecated = true];
   * @deprecated
   */
  tenant = "";

  /**
   * series is a set raw pprof profiles and accompanying labels
   *
   * @generated from field: repeated parca.profilestore.v1alpha1.RawProfileSeries series = 2;
   */
  series: RawProfileSeries[] = [];

  /**
   * normalized is a flag indicating if the addresses in the profile is normalized for position independent code
   *
   * @generated from field: bool normalized = 3;
   */
  normalized = false;

  constructor(data?: PartialMessage<WriteRawRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.profilestore.v1alpha1.WriteRawRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "series", kind: "message", T: RawProfileSeries, repeated: true },
    { no: 3, name: "normalized", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteRawRequest {
    return new WriteRawRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteRawRequest {
    return new WriteRawRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteRawRequest {
    return new WriteRawRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WriteRawRequest | PlainMessage<WriteRawRequest> | undefined, b: WriteRawRequest | PlainMessage<WriteRawRequest> | undefined): boolean {
    return proto3.util.equals(WriteRawRequest, a, b);
  }
}

/**
 * WriteRawResponse is the empty response
 *
 * @generated from message parca.profilestore.v1alpha1.WriteRawResponse
 */
export class WriteRawResponse extends Message<WriteRawResponse> {
  constructor(data?: PartialMessage<WriteRawResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.profilestore.v1alpha1.WriteRawResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteRawResponse {
    return new WriteRawResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteRawResponse {
    return new WriteRawResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteRawResponse {
    return new WriteRawResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WriteRawResponse | PlainMessage<WriteRawResponse> | undefined, b: WriteRawResponse | PlainMessage<WriteRawResponse> | undefined): boolean {
    return proto3.util.equals(WriteRawResponse, a, b);
  }
}

/**
 * RawProfileSeries represents the pprof profile and its associated labels
 *
 * @generated from message parca.profilestore.v1alpha1.RawProfileSeries
 */
export class RawProfileSeries extends Message<RawProfileSeries> {
  /**
   * LabelSet is the key value pairs to identify the corresponding profile
   *
   * @generated from field: parca.profilestore.v1alpha1.LabelSet labels = 1;
   */
  labels?: LabelSet;

  /**
   * samples are the set of profile bytes
   *
   * @generated from field: repeated parca.profilestore.v1alpha1.RawSample samples = 2;
   */
  samples: RawSample[] = [];

  constructor(data?: PartialMessage<RawProfileSeries>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.profilestore.v1alpha1.RawProfileSeries";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "labels", kind: "message", T: LabelSet },
    { no: 2, name: "samples", kind: "message", T: RawSample, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RawProfileSeries {
    return new RawProfileSeries().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RawProfileSeries {
    return new RawProfileSeries().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RawProfileSeries {
    return new RawProfileSeries().fromJsonString(jsonString, options);
  }

  static equals(a: RawProfileSeries | PlainMessage<RawProfileSeries> | undefined, b: RawProfileSeries | PlainMessage<RawProfileSeries> | undefined): boolean {
    return proto3.util.equals(RawProfileSeries, a, b);
  }
}

/**
 * Label is a key value pair of identifiers
 *
 * @generated from message parca.profilestore.v1alpha1.Label
 */
export class Label extends Message<Label> {
  /**
   * name is the label name
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * value is the value for the label name
   *
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<Label>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.profilestore.v1alpha1.Label";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Label {
    return new Label().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Label {
    return new Label().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Label {
    return new Label().fromJsonString(jsonString, options);
  }

  static equals(a: Label | PlainMessage<Label> | undefined, b: Label | PlainMessage<Label> | undefined): boolean {
    return proto3.util.equals(Label, a, b);
  }
}

/**
 * LabelSet is a group of labels
 *
 * @generated from message parca.profilestore.v1alpha1.LabelSet
 */
export class LabelSet extends Message<LabelSet> {
  /**
   * labels are the grouping of labels
   *
   * @generated from field: repeated parca.profilestore.v1alpha1.Label labels = 1;
   */
  labels: Label[] = [];

  constructor(data?: PartialMessage<LabelSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.profilestore.v1alpha1.LabelSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "labels", kind: "message", T: Label, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LabelSet {
    return new LabelSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LabelSet {
    return new LabelSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LabelSet {
    return new LabelSet().fromJsonString(jsonString, options);
  }

  static equals(a: LabelSet | PlainMessage<LabelSet> | undefined, b: LabelSet | PlainMessage<LabelSet> | undefined): boolean {
    return proto3.util.equals(LabelSet, a, b);
  }
}

/**
 * RawSample is the set of bytes that correspond to a pprof profile
 *
 * @generated from message parca.profilestore.v1alpha1.RawSample
 */
export class RawSample extends Message<RawSample> {
  /**
   * raw_profile is the set of bytes of the pprof profile
   *
   * @generated from field: bytes raw_profile = 1;
   */
  rawProfile = new Uint8Array(0);

  constructor(data?: PartialMessage<RawSample>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.profilestore.v1alpha1.RawSample";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "raw_profile", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RawSample {
    return new RawSample().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RawSample {
    return new RawSample().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RawSample {
    return new RawSample().fromJsonString(jsonString, options);
  }

  static equals(a: RawSample | PlainMessage<RawSample> | undefined, b: RawSample | PlainMessage<RawSample> | undefined): boolean {
    return proto3.util.equals(RawSample, a, b);
  }
}

/**
 * AgentsRequest is the request to retrieve a list of agents
 *
 * @generated from message parca.profilestore.v1alpha1.AgentsRequest
 */
export class AgentsRequest extends Message<AgentsRequest> {
  constructor(data?: PartialMessage<AgentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.profilestore.v1alpha1.AgentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AgentsRequest {
    return new AgentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AgentsRequest {
    return new AgentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AgentsRequest {
    return new AgentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AgentsRequest | PlainMessage<AgentsRequest> | undefined, b: AgentsRequest | PlainMessage<AgentsRequest> | undefined): boolean {
    return proto3.util.equals(AgentsRequest, a, b);
  }
}

/**
 * AgentsResponse is the request to retrieve a list of agents
 *
 * @generated from message parca.profilestore.v1alpha1.AgentsResponse
 */
export class AgentsResponse extends Message<AgentsResponse> {
  /**
   * agents is a list of agents
   *
   * @generated from field: repeated parca.profilestore.v1alpha1.Agent agents = 1;
   */
  agents: Agent[] = [];

  constructor(data?: PartialMessage<AgentsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.profilestore.v1alpha1.AgentsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agents", kind: "message", T: Agent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AgentsResponse {
    return new AgentsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AgentsResponse {
    return new AgentsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AgentsResponse {
    return new AgentsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AgentsResponse | PlainMessage<AgentsResponse> | undefined, b: AgentsResponse | PlainMessage<AgentsResponse> | undefined): boolean {
    return proto3.util.equals(AgentsResponse, a, b);
  }
}

/**
 * Agent is the agent representation
 *
 * @generated from message parca.profilestore.v1alpha1.Agent
 */
export class Agent extends Message<Agent> {
  /**
   * id is the agent identity that either represent by the node name or the IP address.
   * When node name is not found, this will fallback to IP address.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * last_error is the error message most recently received from a push attempt
   *
   * @generated from field: string last_error = 2;
   */
  lastError = "";

  /**
   * last_push is the time stamp the last push request was performed
   *
   * @generated from field: google.protobuf.Timestamp last_push = 3;
   */
  lastPush?: Timestamp;

  /**
   * last_push_duration is the duration of the last push request
   *
   * @generated from field: google.protobuf.Duration last_push_duration = 4;
   */
  lastPushDuration?: Duration;

  constructor(data?: PartialMessage<Agent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.profilestore.v1alpha1.Agent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "last_push", kind: "message", T: Timestamp },
    { no: 4, name: "last_push_duration", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Agent {
    return new Agent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Agent {
    return new Agent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Agent {
    return new Agent().fromJsonString(jsonString, options);
  }

  static equals(a: Agent | PlainMessage<Agent> | undefined, b: Agent | PlainMessage<Agent> | undefined): boolean {
    return proto3.util.equals(Agent, a, b);
  }
}

