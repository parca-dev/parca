// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file parca/share/v1alpha1/share.proto (package parca.share.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Callgraph, Flamegraph, ProfileType, QueryRequest_ReportType, Top } from "../../query/v1alpha1/query_pb.js";

/**
 * UploadRequest represents the request with profile bytes and description.
 *
 * @generated from message parca.share.v1alpha1.UploadRequest
 */
export class UploadRequest extends Message<UploadRequest> {
  /**
   * pprof bytes of the profile to be uploaded.
   *
   * @generated from field: bytes profile = 1;
   */
  profile = new Uint8Array(0);

  /**
   * Description of the profile.
   *
   * @generated from field: string description = 2;
   */
  description = "";

  constructor(data?: PartialMessage<UploadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.share.v1alpha1.UploadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profile", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadRequest {
    return new UploadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadRequest {
    return new UploadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadRequest {
    return new UploadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadRequest | PlainMessage<UploadRequest> | undefined, b: UploadRequest | PlainMessage<UploadRequest> | undefined): boolean {
    return proto3.util.equals(UploadRequest, a, b);
  }
}

/**
 * UploadResponse represents the response with the link that can be used to access the profile.
 *
 * @generated from message parca.share.v1alpha1.UploadResponse
 */
export class UploadResponse extends Message<UploadResponse> {
  /**
   * id of the uploaded profile.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * link that can be used to access the profile.
   *
   * @generated from field: string link = 2;
   */
  link = "";

  constructor(data?: PartialMessage<UploadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.share.v1alpha1.UploadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "link", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadResponse {
    return new UploadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadResponse {
    return new UploadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadResponse {
    return new UploadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UploadResponse | PlainMessage<UploadResponse> | undefined, b: UploadResponse | PlainMessage<UploadResponse> | undefined): boolean {
    return proto3.util.equals(UploadResponse, a, b);
  }
}

/**
 * QueryRequest represents the request with the id of the profile to be queried.
 *
 * @generated from message parca.share.v1alpha1.QueryRequest
 */
export class QueryRequest extends Message<QueryRequest> {
  /**
   * id of the profile to be queried.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Type of the profile to be queried.
   *
   * @generated from field: optional string profile_type = 2;
   */
  profileType?: string;

  /**
   * report_type is the type of report to return
   *
   * @generated from field: parca.query.v1alpha1.QueryRequest.ReportType report_type = 3;
   */
  reportType = QueryRequest_ReportType.FLAMEGRAPH_UNSPECIFIED;

  /**
   * filter_query is the query string to filter the profile samples
   *
   * @generated from field: optional string filter_query = 4;
   */
  filterQuery?: string;

  /**
   * node_trim_threshold is the threshold % where the nodes with Value less than this will be removed from the report
   *
   * @generated from field: optional float node_trim_threshold = 5;
   */
  nodeTrimThreshold?: number;

  constructor(data?: PartialMessage<QueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.share.v1alpha1.QueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "profile_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "report_type", kind: "enum", T: proto3.getEnumType(QueryRequest_ReportType) },
    { no: 4, name: "filter_query", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "node_trim_threshold", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRequest {
    return new QueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRequest {
    return new QueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRequest {
    return new QueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRequest | PlainMessage<QueryRequest> | undefined, b: QueryRequest | PlainMessage<QueryRequest> | undefined): boolean {
    return proto3.util.equals(QueryRequest, a, b);
  }
}

/**
 * ProfileTypesRequest represents the profile types request with the id of the profile to be queried.
 *
 * @generated from message parca.share.v1alpha1.ProfileTypesRequest
 */
export class ProfileTypesRequest extends Message<ProfileTypesRequest> {
  /**
   * id of the profile's types to be queried.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ProfileTypesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.share.v1alpha1.ProfileTypesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProfileTypesRequest {
    return new ProfileTypesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProfileTypesRequest {
    return new ProfileTypesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProfileTypesRequest {
    return new ProfileTypesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProfileTypesRequest | PlainMessage<ProfileTypesRequest> | undefined, b: ProfileTypesRequest | PlainMessage<ProfileTypesRequest> | undefined): boolean {
    return proto3.util.equals(ProfileTypesRequest, a, b);
  }
}

/**
 * ProfileTypesResponse represents the response with the list of available profile types.
 *
 * @generated from message parca.share.v1alpha1.ProfileTypesResponse
 */
export class ProfileTypesResponse extends Message<ProfileTypesResponse> {
  /**
   * list of available profile types.
   *
   * @generated from field: repeated parca.query.v1alpha1.ProfileType types = 1;
   */
  types: ProfileType[] = [];

  /**
   * description of the profile uploaded.
   *
   * @generated from field: string description = 2;
   */
  description = "";

  constructor(data?: PartialMessage<ProfileTypesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.share.v1alpha1.ProfileTypesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "types", kind: "message", T: ProfileType, repeated: true },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProfileTypesResponse {
    return new ProfileTypesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProfileTypesResponse {
    return new ProfileTypesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProfileTypesResponse {
    return new ProfileTypesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProfileTypesResponse | PlainMessage<ProfileTypesResponse> | undefined, b: ProfileTypesResponse | PlainMessage<ProfileTypesResponse> | undefined): boolean {
    return proto3.util.equals(ProfileTypesResponse, a, b);
  }
}

/**
 * QueryResponse is the returned report for the given query.
 *
 * @generated from message parca.share.v1alpha1.QueryResponse
 */
export class QueryResponse extends Message<QueryResponse> {
  /**
   * report is the generated report
   *
   * @generated from oneof parca.share.v1alpha1.QueryResponse.report
   */
  report: {
    /**
     * flamegraph is a flamegraph representation of the report
     *
     * @generated from field: parca.query.v1alpha1.Flamegraph flamegraph = 1;
     */
    value: Flamegraph;
    case: "flamegraph";
  } | {
    /**
     * pprof is a pprof profile as compressed bytes
     *
     * @generated from field: bytes pprof = 2;
     */
    value: Uint8Array;
    case: "pprof";
  } | {
    /**
     * top is a top list representation of the report
     *
     * @generated from field: parca.query.v1alpha1.Top top = 3;
     */
    value: Top;
    case: "top";
  } | {
    /**
     * callgraph is a callgraph nodes and edges representation of the report
     *
     * @generated from field: parca.query.v1alpha1.Callgraph callgraph = 4;
     */
    value: Callgraph;
    case: "callgraph";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * total is the total number of samples shown in the report.
   *
   * @generated from field: int64 total = 5;
   */
  total = protoInt64.zero;

  /**
   * filtered is the number of samples filtered out of the report.
   *
   * @generated from field: int64 filtered = 6;
   */
  filtered = protoInt64.zero;

  constructor(data?: PartialMessage<QueryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "parca.share.v1alpha1.QueryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flamegraph", kind: "message", T: Flamegraph, oneof: "report" },
    { no: 2, name: "pprof", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "report" },
    { no: 3, name: "top", kind: "message", T: Top, oneof: "report" },
    { no: 4, name: "callgraph", kind: "message", T: Callgraph, oneof: "report" },
    { no: 5, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "filtered", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResponse {
    return new QueryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResponse {
    return new QueryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResponse {
    return new QueryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResponse | PlainMessage<QueryResponse> | undefined, b: QueryResponse | PlainMessage<QueryResponse> | undefined): boolean {
    return proto3.util.equals(QueryResponse, a, b);
  }
}

