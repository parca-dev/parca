syntax = "proto3";

package parca.debuginfo.v1alpha1;

// DebugInfoService is a service that allows storage of debug info
service DebugInfoService {
  // Exists returns true if the given build_id has debug info uploaded for it.
  rpc Exists(ExistsRequest) returns (ExistsResponse) {}

  // Upload ingests debug info for a given build_id
  rpc Upload(stream UploadRequest) returns (UploadResponse) {}

  // Download returns the debug info for a given build_id.
  rpc Download(DownloadRequest) returns (stream DownloadResponse) {}
}

// ExistsRequest request to determine if debug info exists for a given build_id
message ExistsRequest {
  // build_id is a unique identifier for the debug data
  string build_id = 1;

  // hash is the hash of the debug information file
  string hash = 2;
}

// ExistsResponse returns whether the given build_id has debug info
message ExistsResponse {
  // exists indicates if there is debug data present for the given build_id
  bool exists = 1;
}

// UploadRequest upload debug info
message UploadRequest {
  // data contains either the upload info metadata or the debug info
  oneof data {
    // info is the metadata for the debug info
    UploadInfo info = 1;

    // chunk_data is the raw bytes of the debug info
    bytes chunk_data = 2;
  }
}

// UploadInfo contains the build_id and other metadata for the debug data
message UploadInfo {
  // build_id is a unique identifier for the debug data
  string build_id = 1;

  // hash is the hash of the source file that debug information extracted from
  string hash = 2;

// TODO(kakkoyun): Add SourceHash and use Hash as debuginfo file hash.
// TODO(kakkoyun): Add SourceType enum.
}

// UploadResponse returns the build_id and the size of the uploaded debug info
message UploadResponse {
  // build_id is a unique identifier for the debug data
  string build_id = 1;

  // size is the number of bytes of the debug info
  uint64 size = 2;
}

// DownloadRequest upload debug info
message DownloadRequest {
  // build_id is a unique identifier for the debug data
  string build_id = 1;
}

// DownloadRequest returns chunked data of the debuginfo.
message DownloadResponse {
  // data contains either the upload info metadata or the debug info
  oneof data {
    // info is the metadata for the debug info
    DownloadInfo info = 1;

    // chunk_data is the raw bytes of the debug info
    bytes chunk_data = 2;
  }
}

// DownloadInfo metadata for the debug data that is being downloaded.
message DownloadInfo {
  // Source enum describes the source a debuginfo is from.
  enum Source {
    // To understand when no source is set we have the unknown source.
    SOURCE_UNKNOWN_UNSPECIFIED = 0;
    // The debuginfo was uploaded by a user/agent.
    SOURCE_UPLOAD = 1;
    // The debuginfo was downloaded from a public debuginfod server.
    SOURCE_DEBUGINFOD = 2;
  }

  // Source indicates the origin of the debuginfo being downloaded.
  Source source = 1;
}
