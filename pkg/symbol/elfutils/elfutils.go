// Copyright 2021 The Parca Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package elfutils

import (
	"debug/elf"
	"errors"
	"fmt"
	"io"
	"strings"
)

var dwarfSuffix = func(s *elf.Section) string {
	switch {
	case strings.HasPrefix(s.Name, ".debug_"):
		return s.Name[7:]
	case strings.HasPrefix(s.Name, ".zdebug_"):
		return s.Name[8:]
	case strings.HasPrefix(s.Name, "__debug_"): // macos
		return s.Name[8:]
	default:
		return ""
	}
}

// HasDWARF reports whether the specified executable or library file contains DWARF debug information.
func HasDWARF(path string) (bool, error) {
	f, err := elf.Open(path)
	if err != nil {
		return false, fmt.Errorf("failed to open elf: %w", err)
	}
	defer f.Close()

	sections, err := readableDWARFSections(f)
	if err != nil {
		return false, fmt.Errorf("failed to read DWARF sections: %w", err)
	}

	return len(sections) > 0, nil
}

// A simplified and modified version of debug/elf.DWARF().
func readableDWARFSections(f *elf.File) (map[string]struct{}, error) {
	// There are many DWARf sections, but these are the ones
	// the debug/dwarf package started with "abbrev", "info", "str", "line", "ranges".
	// Possible candidates for future: "loc", "loclists", "rnglists"
	sections := map[string]*string{"abbrev": nil, "info": nil, "str": nil, "line": nil, "ranges": nil}
	exists := map[string]struct{}{}
	for _, s := range f.Sections {
		suffix := dwarfSuffix(s)
		if suffix == "" {
			continue
		}
		if _, ok := sections[suffix]; !ok {
			continue
		}
		if s.Type == elf.SHT_PROGBITS {
			exists[suffix] = struct{}{}
		}
	}

	return exists, nil
}

// IsSymbolizableGoObjFile checks whether the specified executable or library file is generated by Go toolchain
// and has necessary symbol information attached.
func IsSymbolizableGoObjFile(path string) (bool, error) {
	// Checks ".note.go.buildid" section and symtab better to keep those sections in object file.
	f, err := elf.Open(path)
	if err != nil {
		return false, fmt.Errorf("failed to open elf: %w", err)
	}
	defer f.Close()

	isGo := false
	for _, s := range f.Sections {
		if s.Name == ".note.go.buildid" {
			isGo = true
		}
	}

	// In case ".note.go.buildid" section is stripped, check for symbols.
	if !isGo {
		syms, err := f.Symbols()
		if err != nil {
			return false, fmt.Errorf("failed to read symbols: %w", err)
		}
		for _, sym := range syms {
			name := sym.Name
			if name == "runtime.main" || name == "main.main" {
				isGo = true
			}
			if name == "runtime.buildVersion" {
				isGo = true
			}
		}
	}

	if !isGo {
		return false, nil
	}

	// Check if the Go binary symbolizable.
	// Go binaries has a special case. They use ".gopclntab" section to symbolize addresses.
	if sec := f.Section(".gopclntab"); sec != nil {
		if sec.Type == elf.SHT_PROGBITS {
			return true, nil
		}
	}

	return false, errors.New("failed to detect .gopclntab section or section has no bits")
}

// IsGoObjFile checks whether the specified executable or library file is generated by Go toolchain.
func IsGoObjFile(path string) (bool, error) {
	// Checks ".note.go.buildid" section and symtab better to keep those sections in object file.
	f, err := elf.Open(path)
	if err != nil {
		return false, fmt.Errorf("failed to open elf: %w", err)
	}
	defer f.Close()

	for _, s := range f.Sections {
		if s.Name == ".note.go.buildid" {
			return true, nil
		}
	}
	return false, nil
}

// HasSymbols reports whether the specified executable or library file contains symbols (both.symtab and .dynsym).
func HasSymbols(path string) (bool, error) {
	ef, err := elf.Open(path)
	if err != nil {
		return false, fmt.Errorf("failed to open elf: %w", err)
	}
	defer ef.Close()

	for _, section := range ef.Sections {
		if section.Type == elf.SHT_SYMTAB || section.Type == elf.SHT_DYNSYM {
			return true, nil
		}
	}
	return false, nil
}

// ValidateFile returns true if the given object file is valid.
func ValidateFile(path string) error {
	elfFile, err := elf.Open(path)
	if err != nil {
		return err
	}
	defer elfFile.Close()

	return validate(elfFile)
}

// ValidateReader returns true if the given object file is valid.
func ValidateReader(r io.ReaderAt) error {
	elfFile, err := elf.NewFile(r)
	if err != nil {
		return err
	}
	defer elfFile.Close()

	return validate(elfFile)
}

func validate(f *elf.File) error {
	// TODO(kakkoyun): How can we improve this without allocating too much memory.
	if len(f.Sections) == 0 {
		return errors.New("ELF does not have any sections")
	}
	return nil
}
